State 0 conflicts: 1 shift/reduce
State 1 conflicts: 1 shift/reduce
State 2 conflicts: 6 shift/reduce
State 4 conflicts: 2 shift/reduce
State 5 conflicts: 1 shift/reduce
State 9 conflicts: 1 shift/reduce
State 10 conflicts: 1 shift/reduce
State 11 conflicts: 1 shift/reduce
State 25 conflicts: 1 shift/reduce
State 50 conflicts: 2 shift/reduce
State 51 conflicts: 1 shift/reduce
State 88 conflicts: 2 shift/reduce
State 89 conflicts: 2 shift/reduce
State 90 conflicts: 2 shift/reduce
State 91 conflicts: 1 shift/reduce
State 93 conflicts: 2 shift/reduce
State 101 conflicts: 1 shift/reduce
State 103 conflicts: 1 shift/reduce
State 109 conflicts: 2 shift/reduce
State 110 conflicts: 2 shift/reduce
State 111 conflicts: 1 shift/reduce
State 112 conflicts: 2 shift/reduce
State 115 conflicts: 2 shift/reduce
State 117 conflicts: 12 shift/reduce
State 118 conflicts: 12 shift/reduce
State 119 conflicts: 12 shift/reduce
State 122 conflicts: 12 shift/reduce
State 123 conflicts: 1 shift/reduce
State 126 conflicts: 1 shift/reduce
State 133 conflicts: 13 shift/reduce
State 134 conflicts: 12 shift/reduce
State 148 conflicts: 2 shift/reduce
State 151 conflicts: 2 shift/reduce
State 152 conflicts: 2 shift/reduce
State 153 conflicts: 1 shift/reduce
State 156 conflicts: 2 shift/reduce
State 159 conflicts: 12 shift/reduce
State 160 conflicts: 1 shift/reduce
State 161 conflicts: 12 shift/reduce
State 162 conflicts: 12 shift/reduce
State 165 conflicts: 2 shift/reduce
State 172 conflicts: 2 shift/reduce


Grammar

    0 $accept: program $end

    1 program: decs
    2        | exp

    3 decs: decs dec
    4     | dec

    5 dec: tydec
    6    | vardec
    7    | fundec

    8 tydec: TYPE ID EQ ty
    9      | LBRACK tyfields RBRACK
   10      | ARRAY OF ID

   11 ty: ID
   12   | ARRAY OF ID
   13   | LBRACE tyfields RBRACE

   14 tyfields: tyfields COMMA tyfield
   15         | tyfield

   16 tyfield: ID COLON ID
   17        | empty

   18 vardec: VAR ID ASSIGN exp
   19       | VAR ID COLON ID ASSIGN exp

   20 fundec: FUNCTION ID LPAREN tyfields RPAREN EQ exp
   21       | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp

   22 exp: lvalue
   23    | no_value_exp
   24    | nil
   25    | list
   26    | int
   27    | string
   28    | function
   29    | operation
   30    | compare
   31    | new
   32    | assign
   33    | if_then
   34    | if_then_else
   35    | while_do
   36    | for_to_do
   37    | break
   38    | let_in_end
   39    | parentheses

   40 lvalue: ID
   41       | lvalue DOT ID
   42       | lvalue LBRACK exp RBRACK

   43 no_value_exp: LPAREN RPAREN
   44             | LBRACK RBRACK
   45             | LBRACE RBRACE
   46             | empty

   47 nil: NIL

   48 list: LPAREN list_exps RPAREN

   49 list_exps: list_exps SEMICOLON exp
   50          | exp SEMICOLON exp

   51 int: INT
   52    | MINUS int

   53 string: STRING

   54 function: ID LPAREN RPAREN
   55         | ID LPAREN function_exps RPAREN

   56 function_exps: function_exps COMMA exp
   57              | exp

   58 operation: exp_operation
   59          | bool_operation

   60 exp_operation: exp exp_op exp

   61 exp_op: PLUS
   62       | MINUS
   63       | TIMES
   64       | DIVIDE

   65 bool_operation: exp bool_op exp

   66 bool_op: AND
   67        | OR

   68 compare: exp_compare
   69        | string_compare

   70 exp_compare: exp compare_op exp

   71 string_compare: STRING compare_op STRING

   72 compare_op: EQ
   73           | NEQ
   74           | LT
   75           | LE
   76           | GT
   77           | GE

   78 new: type_new
   79    | array_new

   80 type_new: ID LBRACE type_new_exps RBRACE

   81 type_new_exps: type_new_exps COMMA ID EQ exp
   82              | ID EQ exp

   83 array_new: ID LBRACK exp RBRACK OF exp

   84 assign: lvalue ASSIGN exp

   85 if_then: IF exp THEN exp

   86 if_then_else: IF exp THEN exp ELSE exp

   87 while_do: WHILE exp DO exp

   88 for_to_do: FOR exp TO exp DO exp

   89 break: BREAK

   90 let_in_end: LET decs IN expseq END
   91           | LET decs IN END

   92 expseq: expseq SEMICOLON exp
   93       | exp

   94 parentheses: LPAREN exp RPAREN

   95 empty: /* empty */


Terminals, with rules where they appear

$end (0) 0
error (256)
ID (258) 8 10 11 12 16 18 19 20 21 40 41 54 55 80 81 82 83
STRING (259) 53 71
INT (260) 51
COMMA (261) 14 56 81
COLON (262) 16 19 21
SEMICOLON (263) 49 50 92
LPAREN (264) 20 21 43 48 54 55 94
RPAREN (265) 20 21 43 48 54 55 94
LBRACK (266) 9 42 44 83
RBRACK (267) 9 42 44 83
LBRACE (268) 13 45 80
RBRACE (269) 13 45 80
DOT (270) 41
PLUS (271) 61
MINUS (272) 52 62
TIMES (273) 63
DIVIDE (274) 64
EQ (275) 8 20 21 72 81 82
NEQ (276) 73
LT (277) 74
LE (278) 75
GT (279) 76
GE (280) 77
AND (281) 66
OR (282) 67
ASSIGN (283) 18 19 84
ARRAY (284) 10 12
IF (285) 85 86
THEN (286) 85 86
ELSE (287) 86
WHILE (288) 87
FOR (289) 88
TO (290) 88
DO (291) 87 88
LET (292) 90 91
IN (293) 90 91
END (294) 90 91
OF (295) 10 12 83
BREAK (296) 89
NIL (297) 47
FUNCTION (298) 20 21
VAR (299) 18 19
TYPE (300) 8


Nonterminals, with rules where they appear

$accept (46)
    on left: 0
program (47)
    on left: 1 2, on right: 0
decs (48)
    on left: 3 4, on right: 1 3 90 91
dec (49)
    on left: 5 6 7, on right: 3 4
tydec (50)
    on left: 8 9 10, on right: 5
ty (51)
    on left: 11 12 13, on right: 8
tyfields (52)
    on left: 14 15, on right: 9 13 14 20 21
tyfield (53)
    on left: 16 17, on right: 14 15
vardec (54)
    on left: 18 19, on right: 6
fundec (55)
    on left: 20 21, on right: 7
exp (56)
    on left: 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39
   , on right: 2 18 19 20 21 42 49 50 56 57 60 65 70 81 82 83 84 85
    86 87 88 92 93 94
lvalue (57)
    on left: 40 41 42, on right: 22 41 42 84
no_value_exp (58)
    on left: 43 44 45 46, on right: 23
nil (59)
    on left: 47, on right: 24
list (60)
    on left: 48, on right: 25
list_exps (61)
    on left: 49 50, on right: 48 49
int (62)
    on left: 51 52, on right: 26 52
string (63)
    on left: 53, on right: 27
function (64)
    on left: 54 55, on right: 28
function_exps (65)
    on left: 56 57, on right: 55 56
operation (66)
    on left: 58 59, on right: 29
exp_operation (67)
    on left: 60, on right: 58
exp_op (68)
    on left: 61 62 63 64, on right: 60
bool_operation (69)
    on left: 65, on right: 59
bool_op (70)
    on left: 66 67, on right: 65
compare (71)
    on left: 68 69, on right: 30
exp_compare (72)
    on left: 70, on right: 68
string_compare (73)
    on left: 71, on right: 69
compare_op (74)
    on left: 72 73 74 75 76 77, on right: 70 71
new (75)
    on left: 78 79, on right: 31
type_new (76)
    on left: 80, on right: 78
type_new_exps (77)
    on left: 81 82, on right: 80 81
array_new (78)
    on left: 83, on right: 79
assign (79)
    on left: 84, on right: 32
if_then (80)
    on left: 85, on right: 33
if_then_else (81)
    on left: 86, on right: 34
while_do (82)
    on left: 87, on right: 35
for_to_do (83)
    on left: 88, on right: 36
break (84)
    on left: 89, on right: 37
let_in_end (85)
    on left: 90 91, on right: 38
expseq (86)
    on left: 92 93, on right: 90 92
parentheses (87)
    on left: 94, on right: 39
empty (88)
    on left: 95, on right: 17 46


state 0

    0 $accept: . program $end

    ID        shift, and go to state 1
    STRING    shift, and go to state 2
    INT       shift, and go to state 3
    LPAREN    shift, and go to state 4
    LBRACK    shift, and go to state 5
    LBRACE    shift, and go to state 6
    MINUS     shift, and go to state 7
    ARRAY     shift, and go to state 8
    IF        shift, and go to state 9
    WHILE     shift, and go to state 10
    FOR       shift, and go to state 11
    LET       shift, and go to state 12
    BREAK     shift, and go to state 13
    NIL       shift, and go to state 14
    FUNCTION  shift, and go to state 15
    VAR       shift, and go to state 16
    TYPE      shift, and go to state 17

    MINUS     [reduce using rule 95 (empty)]
    $default  reduce using rule 95 (empty)

    program         go to state 18
    decs            go to state 19
    dec             go to state 20
    tydec           go to state 21
    vardec          go to state 22
    fundec          go to state 23
    exp             go to state 24
    lvalue          go to state 25
    no_value_exp    go to state 26
    nil             go to state 27
    list            go to state 28
    int             go to state 29
    string          go to state 30
    function        go to state 31
    operation       go to state 32
    exp_operation   go to state 33
    bool_operation  go to state 34
    compare         go to state 35
    exp_compare     go to state 36
    string_compare  go to state 37
    new             go to state 38
    type_new        go to state 39
    array_new       go to state 40
    assign          go to state 41
    if_then         go to state 42
    if_then_else    go to state 43
    while_do        go to state 44
    for_to_do       go to state 45
    break           go to state 46
    let_in_end      go to state 47
    parentheses     go to state 48
    empty           go to state 49


state 1

   40 lvalue: ID .
   54 function: ID . LPAREN RPAREN
   55         | ID . LPAREN function_exps RPAREN
   80 type_new: ID . LBRACE type_new_exps RBRACE
   83 array_new: ID . LBRACK exp RBRACK OF exp

    LPAREN  shift, and go to state 50
    LBRACK  shift, and go to state 51
    LBRACE  shift, and go to state 52

    LBRACK    [reduce using rule 40 (lvalue)]
    $default  reduce using rule 40 (lvalue)


state 2

   53 string: STRING .
   71 string_compare: STRING . compare_op STRING

    EQ   shift, and go to state 53
    NEQ  shift, and go to state 54
    LT   shift, and go to state 55
    LE   shift, and go to state 56
    GT   shift, and go to state 57
    GE   shift, and go to state 58

    EQ        [reduce using rule 53 (string)]
    NEQ       [reduce using rule 53 (string)]
    LT        [reduce using rule 53 (string)]
    LE        [reduce using rule 53 (string)]
    GT        [reduce using rule 53 (string)]
    GE        [reduce using rule 53 (string)]
    $default  reduce using rule 53 (string)

    compare_op  go to state 59


state 3

   51 int: INT .

    $default  reduce using rule 51 (int)


state 4

   43 no_value_exp: LPAREN . RPAREN
   48 list: LPAREN . list_exps RPAREN
   94 parentheses: LPAREN . exp RPAREN

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    RPAREN  shift, and go to state 60
    LBRACK  shift, and go to state 61
    LBRACE  shift, and go to state 6
    MINUS   shift, and go to state 7
    IF      shift, and go to state 9
    WHILE   shift, and go to state 10
    FOR     shift, and go to state 11
    LET     shift, and go to state 12
    BREAK   shift, and go to state 13
    NIL     shift, and go to state 14

    RPAREN    [reduce using rule 95 (empty)]
    MINUS     [reduce using rule 95 (empty)]
    $default  reduce using rule 95 (empty)

    exp             go to state 62
    lvalue          go to state 25
    no_value_exp    go to state 26
    nil             go to state 27
    list            go to state 28
    list_exps       go to state 63
    int             go to state 29
    string          go to state 30
    function        go to state 31
    operation       go to state 32
    exp_operation   go to state 33
    bool_operation  go to state 34
    compare         go to state 35
    exp_compare     go to state 36
    string_compare  go to state 37
    new             go to state 38
    type_new        go to state 39
    array_new       go to state 40
    assign          go to state 41
    if_then         go to state 42
    if_then_else    go to state 43
    while_do        go to state 44
    for_to_do       go to state 45
    break           go to state 46
    let_in_end      go to state 47
    parentheses     go to state 48
    empty           go to state 49


state 5

    9 tydec: LBRACK . tyfields RBRACK
   44 no_value_exp: LBRACK . RBRACK

    ID      shift, and go to state 64
    RBRACK  shift, and go to state 65

    RBRACK    [reduce using rule 95 (empty)]
    $default  reduce using rule 95 (empty)

    tyfields  go to state 66
    tyfield   go to state 67
    empty     go to state 68


state 6

   45 no_value_exp: LBRACE . RBRACE

    RBRACE  shift, and go to state 69


state 7

   52 int: MINUS . int

    INT    shift, and go to state 3
    MINUS  shift, and go to state 7

    int  go to state 70


state 8

   10 tydec: ARRAY . OF ID

    OF  shift, and go to state 71


state 9

   85 if_then: IF . exp THEN exp
   86 if_then_else: IF . exp THEN exp ELSE exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    LBRACK  shift, and go to state 61
    LBRACE  shift, and go to state 6
    MINUS   shift, and go to state 7
    IF      shift, and go to state 9
    WHILE   shift, and go to state 10
    FOR     shift, and go to state 11
    LET     shift, and go to state 12
    BREAK   shift, and go to state 13
    NIL     shift, and go to state 14

    MINUS     [reduce using rule 95 (empty)]
    $default  reduce using rule 95 (empty)

    exp             go to state 72
    lvalue          go to state 25
    no_value_exp    go to state 26
    nil             go to state 27
    list            go to state 28
    int             go to state 29
    string          go to state 30
    function        go to state 31
    operation       go to state 32
    exp_operation   go to state 33
    bool_operation  go to state 34
    compare         go to state 35
    exp_compare     go to state 36
    string_compare  go to state 37
    new             go to state 38
    type_new        go to state 39
    array_new       go to state 40
    assign          go to state 41
    if_then         go to state 42
    if_then_else    go to state 43
    while_do        go to state 44
    for_to_do       go to state 45
    break           go to state 46
    let_in_end      go to state 47
    parentheses     go to state 48
    empty           go to state 49


state 10

   87 while_do: WHILE . exp DO exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    LBRACK  shift, and go to state 61
    LBRACE  shift, and go to state 6
    MINUS   shift, and go to state 7
    IF      shift, and go to state 9
    WHILE   shift, and go to state 10
    FOR     shift, and go to state 11
    LET     shift, and go to state 12
    BREAK   shift, and go to state 13
    NIL     shift, and go to state 14

    MINUS     [reduce using rule 95 (empty)]
    $default  reduce using rule 95 (empty)

    exp             go to state 73
    lvalue          go to state 25
    no_value_exp    go to state 26
    nil             go to state 27
    list            go to state 28
    int             go to state 29
    string          go to state 30
    function        go to state 31
    operation       go to state 32
    exp_operation   go to state 33
    bool_operation  go to state 34
    compare         go to state 35
    exp_compare     go to state 36
    string_compare  go to state 37
    new             go to state 38
    type_new        go to state 39
    array_new       go to state 40
    assign          go to state 41
    if_then         go to state 42
    if_then_else    go to state 43
    while_do        go to state 44
    for_to_do       go to state 45
    break           go to state 46
    let_in_end      go to state 47
    parentheses     go to state 48
    empty           go to state 49


state 11

   88 for_to_do: FOR . exp TO exp DO exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    LBRACK  shift, and go to state 61
    LBRACE  shift, and go to state 6
    MINUS   shift, and go to state 7
    IF      shift, and go to state 9
    WHILE   shift, and go to state 10
    FOR     shift, and go to state 11
    LET     shift, and go to state 12
    BREAK   shift, and go to state 13
    NIL     shift, and go to state 14

    MINUS     [reduce using rule 95 (empty)]
    $default  reduce using rule 95 (empty)

    exp             go to state 74
    lvalue          go to state 25
    no_value_exp    go to state 26
    nil             go to state 27
    list            go to state 28
    int             go to state 29
    string          go to state 30
    function        go to state 31
    operation       go to state 32
    exp_operation   go to state 33
    bool_operation  go to state 34
    compare         go to state 35
    exp_compare     go to state 36
    string_compare  go to state 37
    new             go to state 38
    type_new        go to state 39
    array_new       go to state 40
    assign          go to state 41
    if_then         go to state 42
    if_then_else    go to state 43
    while_do        go to state 44
    for_to_do       go to state 45
    break           go to state 46
    let_in_end      go to state 47
    parentheses     go to state 48
    empty           go to state 49


state 12

   90 let_in_end: LET . decs IN expseq END
   91           | LET . decs IN END

    LBRACK    shift, and go to state 75
    ARRAY     shift, and go to state 8
    FUNCTION  shift, and go to state 15
    VAR       shift, and go to state 16
    TYPE      shift, and go to state 17

    decs    go to state 76
    dec     go to state 20
    tydec   go to state 21
    vardec  go to state 22
    fundec  go to state 23


state 13

   89 break: BREAK .

    $default  reduce using rule 89 (break)


state 14

   47 nil: NIL .

    $default  reduce using rule 47 (nil)


state 15

   20 fundec: FUNCTION . ID LPAREN tyfields RPAREN EQ exp
   21       | FUNCTION . ID LPAREN tyfields RPAREN COLON ID EQ exp

    ID  shift, and go to state 77


state 16

   18 vardec: VAR . ID ASSIGN exp
   19       | VAR . ID COLON ID ASSIGN exp

    ID  shift, and go to state 78


state 17

    8 tydec: TYPE . ID EQ ty

    ID  shift, and go to state 79


state 18

    0 $accept: program . $end

    $end  shift, and go to state 80


state 19

    1 program: decs .
    3 decs: decs . dec

    LBRACK    shift, and go to state 75
    ARRAY     shift, and go to state 8
    FUNCTION  shift, and go to state 15
    VAR       shift, and go to state 16
    TYPE      shift, and go to state 17

    $default  reduce using rule 1 (program)

    dec     go to state 81
    tydec   go to state 21
    vardec  go to state 22
    fundec  go to state 23


state 20

    4 decs: dec .

    $default  reduce using rule 4 (decs)


state 21

    5 dec: tydec .

    $default  reduce using rule 5 (dec)


state 22

    6 dec: vardec .

    $default  reduce using rule 6 (dec)


state 23

    7 dec: fundec .

    $default  reduce using rule 7 (dec)


state 24

    2 program: exp .
   60 exp_operation: exp . exp_op exp
   65 bool_operation: exp . bool_op exp
   70 exp_compare: exp . compare_op exp

    PLUS    shift, and go to state 82
    MINUS   shift, and go to state 83
    TIMES   shift, and go to state 84
    DIVIDE  shift, and go to state 85
    EQ      shift, and go to state 53
    NEQ     shift, and go to state 54
    LT      shift, and go to state 55
    LE      shift, and go to state 56
    GT      shift, and go to state 57
    GE      shift, and go to state 58
    AND     shift, and go to state 86
    OR      shift, and go to state 87

    $default  reduce using rule 2 (program)

    exp_op      go to state 88
    bool_op     go to state 89
    compare_op  go to state 90


state 25

   22 exp: lvalue .
   41 lvalue: lvalue . DOT ID
   42       | lvalue . LBRACK exp RBRACK
   84 assign: lvalue . ASSIGN exp

    LBRACK  shift, and go to state 91
    DOT     shift, and go to state 92
    ASSIGN  shift, and go to state 93

    LBRACK    [reduce using rule 22 (exp)]
    $default  reduce using rule 22 (exp)


state 26

   23 exp: no_value_exp .

    $default  reduce using rule 23 (exp)


state 27

   24 exp: nil .

    $default  reduce using rule 24 (exp)


state 28

   25 exp: list .

    $default  reduce using rule 25 (exp)


state 29

   26 exp: int .

    $default  reduce using rule 26 (exp)


state 30

   27 exp: string .

    $default  reduce using rule 27 (exp)


state 31

   28 exp: function .

    $default  reduce using rule 28 (exp)


state 32

   29 exp: operation .

    $default  reduce using rule 29 (exp)


state 33

   58 operation: exp_operation .

    $default  reduce using rule 58 (operation)


state 34

   59 operation: bool_operation .

    $default  reduce using rule 59 (operation)


state 35

   30 exp: compare .

    $default  reduce using rule 30 (exp)


state 36

   68 compare: exp_compare .

    $default  reduce using rule 68 (compare)


state 37

   69 compare: string_compare .

    $default  reduce using rule 69 (compare)


state 38

   31 exp: new .

    $default  reduce using rule 31 (exp)


state 39

   78 new: type_new .

    $default  reduce using rule 78 (new)


state 40

   79 new: array_new .

    $default  reduce using rule 79 (new)


state 41

   32 exp: assign .

    $default  reduce using rule 32 (exp)


state 42

   33 exp: if_then .

    $default  reduce using rule 33 (exp)


state 43

   34 exp: if_then_else .

    $default  reduce using rule 34 (exp)


state 44

   35 exp: while_do .

    $default  reduce using rule 35 (exp)


state 45

   36 exp: for_to_do .

    $default  reduce using rule 36 (exp)


state 46

   37 exp: break .

    $default  reduce using rule 37 (exp)


state 47

   38 exp: let_in_end .

    $default  reduce using rule 38 (exp)


state 48

   39 exp: parentheses .

    $default  reduce using rule 39 (exp)


state 49

   46 no_value_exp: empty .

    $default  reduce using rule 46 (no_value_exp)


state 50

   54 function: ID LPAREN . RPAREN
   55         | ID LPAREN . function_exps RPAREN

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    RPAREN  shift, and go to state 94
    LBRACK  shift, and go to state 61
    LBRACE  shift, and go to state 6
    MINUS   shift, and go to state 7
    IF      shift, and go to state 9
    WHILE   shift, and go to state 10
    FOR     shift, and go to state 11
    LET     shift, and go to state 12
    BREAK   shift, and go to state 13
    NIL     shift, and go to state 14

    RPAREN    [reduce using rule 95 (empty)]
    MINUS     [reduce using rule 95 (empty)]
    $default  reduce using rule 95 (empty)

    exp             go to state 95
    lvalue          go to state 25
    no_value_exp    go to state 26
    nil             go to state 27
    list            go to state 28
    int             go to state 29
    string          go to state 30
    function        go to state 31
    function_exps   go to state 96
    operation       go to state 32
    exp_operation   go to state 33
    bool_operation  go to state 34
    compare         go to state 35
    exp_compare     go to state 36
    string_compare  go to state 37
    new             go to state 38
    type_new        go to state 39
    array_new       go to state 40
    assign          go to state 41
    if_then         go to state 42
    if_then_else    go to state 43
    while_do        go to state 44
    for_to_do       go to state 45
    break           go to state 46
    let_in_end      go to state 47
    parentheses     go to state 48
    empty           go to state 49


state 51

   83 array_new: ID LBRACK . exp RBRACK OF exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    LBRACK  shift, and go to state 61
    LBRACE  shift, and go to state 6
    MINUS   shift, and go to state 7
    IF      shift, and go to state 9
    WHILE   shift, and go to state 10
    FOR     shift, and go to state 11
    LET     shift, and go to state 12
    BREAK   shift, and go to state 13
    NIL     shift, and go to state 14

    MINUS     [reduce using rule 95 (empty)]
    $default  reduce using rule 95 (empty)

    exp             go to state 97
    lvalue          go to state 25
    no_value_exp    go to state 26
    nil             go to state 27
    list            go to state 28
    int             go to state 29
    string          go to state 30
    function        go to state 31
    operation       go to state 32
    exp_operation   go to state 33
    bool_operation  go to state 34
    compare         go to state 35
    exp_compare     go to state 36
    string_compare  go to state 37
    new             go to state 38
    type_new        go to state 39
    array_new       go to state 40
    assign          go to state 41
    if_then         go to state 42
    if_then_else    go to state 43
    while_do        go to state 44
    for_to_do       go to state 45
    break           go to state 46
    let_in_end      go to state 47
    parentheses     go to state 48
    empty           go to state 49


state 52

   80 type_new: ID LBRACE . type_new_exps RBRACE

    ID  shift, and go to state 98

    type_new_exps  go to state 99


state 53

   72 compare_op: EQ .

    $default  reduce using rule 72 (compare_op)


state 54

   73 compare_op: NEQ .

    $default  reduce using rule 73 (compare_op)


state 55

   74 compare_op: LT .

    $default  reduce using rule 74 (compare_op)


state 56

   75 compare_op: LE .

    $default  reduce using rule 75 (compare_op)


state 57

   76 compare_op: GT .

    $default  reduce using rule 76 (compare_op)


state 58

   77 compare_op: GE .

    $default  reduce using rule 77 (compare_op)


state 59

   71 string_compare: STRING compare_op . STRING

    STRING  shift, and go to state 100


state 60

   43 no_value_exp: LPAREN RPAREN .

    $default  reduce using rule 43 (no_value_exp)


state 61

   44 no_value_exp: LBRACK . RBRACK

    RBRACK  shift, and go to state 65


state 62

   50 list_exps: exp . SEMICOLON exp
   60 exp_operation: exp . exp_op exp
   65 bool_operation: exp . bool_op exp
   70 exp_compare: exp . compare_op exp
   94 parentheses: LPAREN exp . RPAREN

    SEMICOLON  shift, and go to state 101
    RPAREN     shift, and go to state 102
    PLUS       shift, and go to state 82
    MINUS      shift, and go to state 83
    TIMES      shift, and go to state 84
    DIVIDE     shift, and go to state 85
    EQ         shift, and go to state 53
    NEQ        shift, and go to state 54
    LT         shift, and go to state 55
    LE         shift, and go to state 56
    GT         shift, and go to state 57
    GE         shift, and go to state 58
    AND        shift, and go to state 86
    OR         shift, and go to state 87

    exp_op      go to state 88
    bool_op     go to state 89
    compare_op  go to state 90


state 63

   48 list: LPAREN list_exps . RPAREN
   49 list_exps: list_exps . SEMICOLON exp

    SEMICOLON  shift, and go to state 103
    RPAREN     shift, and go to state 104


state 64

   16 tyfield: ID . COLON ID

    COLON  shift, and go to state 105


state 65

   44 no_value_exp: LBRACK RBRACK .

    $default  reduce using rule 44 (no_value_exp)


state 66

    9 tydec: LBRACK tyfields . RBRACK
   14 tyfields: tyfields . COMMA tyfield

    COMMA   shift, and go to state 106
    RBRACK  shift, and go to state 107


state 67

   15 tyfields: tyfield .

    $default  reduce using rule 15 (tyfields)


state 68

   17 tyfield: empty .

    $default  reduce using rule 17 (tyfield)


state 69

   45 no_value_exp: LBRACE RBRACE .

    $default  reduce using rule 45 (no_value_exp)


state 70

   52 int: MINUS int .

    $default  reduce using rule 52 (int)


state 71

   10 tydec: ARRAY OF . ID

    ID  shift, and go to state 108


state 72

   60 exp_operation: exp . exp_op exp
   65 bool_operation: exp . bool_op exp
   70 exp_compare: exp . compare_op exp
   85 if_then: IF exp . THEN exp
   86 if_then_else: IF exp . THEN exp ELSE exp

    PLUS    shift, and go to state 82
    MINUS   shift, and go to state 83
    TIMES   shift, and go to state 84
    DIVIDE  shift, and go to state 85
    EQ      shift, and go to state 53
    NEQ     shift, and go to state 54
    LT      shift, and go to state 55
    LE      shift, and go to state 56
    GT      shift, and go to state 57
    GE      shift, and go to state 58
    AND     shift, and go to state 86
    OR      shift, and go to state 87
    THEN    shift, and go to state 109

    exp_op      go to state 88
    bool_op     go to state 89
    compare_op  go to state 90


state 73

   60 exp_operation: exp . exp_op exp
   65 bool_operation: exp . bool_op exp
   70 exp_compare: exp . compare_op exp
   87 while_do: WHILE exp . DO exp

    PLUS    shift, and go to state 82
    MINUS   shift, and go to state 83
    TIMES   shift, and go to state 84
    DIVIDE  shift, and go to state 85
    EQ      shift, and go to state 53
    NEQ     shift, and go to state 54
    LT      shift, and go to state 55
    LE      shift, and go to state 56
    GT      shift, and go to state 57
    GE      shift, and go to state 58
    AND     shift, and go to state 86
    OR      shift, and go to state 87
    DO      shift, and go to state 110

    exp_op      go to state 88
    bool_op     go to state 89
    compare_op  go to state 90


state 74

   60 exp_operation: exp . exp_op exp
   65 bool_operation: exp . bool_op exp
   70 exp_compare: exp . compare_op exp
   88 for_to_do: FOR exp . TO exp DO exp

    PLUS    shift, and go to state 82
    MINUS   shift, and go to state 83
    TIMES   shift, and go to state 84
    DIVIDE  shift, and go to state 85
    EQ      shift, and go to state 53
    NEQ     shift, and go to state 54
    LT      shift, and go to state 55
    LE      shift, and go to state 56
    GT      shift, and go to state 57
    GE      shift, and go to state 58
    AND     shift, and go to state 86
    OR      shift, and go to state 87
    TO      shift, and go to state 111

    exp_op      go to state 88
    bool_op     go to state 89
    compare_op  go to state 90


state 75

    9 tydec: LBRACK . tyfields RBRACK

    ID  shift, and go to state 64

    $default  reduce using rule 95 (empty)

    tyfields  go to state 66
    tyfield   go to state 67
    empty     go to state 68


state 76

    3 decs: decs . dec
   90 let_in_end: LET decs . IN expseq END
   91           | LET decs . IN END

    LBRACK    shift, and go to state 75
    ARRAY     shift, and go to state 8
    IN        shift, and go to state 112
    FUNCTION  shift, and go to state 15
    VAR       shift, and go to state 16
    TYPE      shift, and go to state 17

    dec     go to state 81
    tydec   go to state 21
    vardec  go to state 22
    fundec  go to state 23


state 77

   20 fundec: FUNCTION ID . LPAREN tyfields RPAREN EQ exp
   21       | FUNCTION ID . LPAREN tyfields RPAREN COLON ID EQ exp

    LPAREN  shift, and go to state 113


state 78

   18 vardec: VAR ID . ASSIGN exp
   19       | VAR ID . COLON ID ASSIGN exp

    COLON   shift, and go to state 114
    ASSIGN  shift, and go to state 115


state 79

    8 tydec: TYPE ID . EQ ty

    EQ  shift, and go to state 116


state 80

    0 $accept: program $end .

    $default  accept


state 81

    3 decs: decs dec .

    $default  reduce using rule 3 (decs)


state 82

   61 exp_op: PLUS .

    $default  reduce using rule 61 (exp_op)


state 83

   62 exp_op: MINUS .

    $default  reduce using rule 62 (exp_op)


state 84

   63 exp_op: TIMES .

    $default  reduce using rule 63 (exp_op)


state 85

   64 exp_op: DIVIDE .

    $default  reduce using rule 64 (exp_op)


state 86

   66 bool_op: AND .

    $default  reduce using rule 66 (bool_op)


state 87

   67 bool_op: OR .

    $default  reduce using rule 67 (bool_op)


state 88

   60 exp_operation: exp exp_op . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    LBRACK  shift, and go to state 61
    LBRACE  shift, and go to state 6
    MINUS   shift, and go to state 7
    IF      shift, and go to state 9
    WHILE   shift, and go to state 10
    FOR     shift, and go to state 11
    LET     shift, and go to state 12
    BREAK   shift, and go to state 13
    NIL     shift, and go to state 14

    LBRACK    [reduce using rule 95 (empty)]
    MINUS     [reduce using rule 95 (empty)]
    $default  reduce using rule 95 (empty)

    exp             go to state 117
    lvalue          go to state 25
    no_value_exp    go to state 26
    nil             go to state 27
    list            go to state 28
    int             go to state 29
    string          go to state 30
    function        go to state 31
    operation       go to state 32
    exp_operation   go to state 33
    bool_operation  go to state 34
    compare         go to state 35
    exp_compare     go to state 36
    string_compare  go to state 37
    new             go to state 38
    type_new        go to state 39
    array_new       go to state 40
    assign          go to state 41
    if_then         go to state 42
    if_then_else    go to state 43
    while_do        go to state 44
    for_to_do       go to state 45
    break           go to state 46
    let_in_end      go to state 47
    parentheses     go to state 48
    empty           go to state 49


state 89

   65 bool_operation: exp bool_op . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    LBRACK  shift, and go to state 61
    LBRACE  shift, and go to state 6
    MINUS   shift, and go to state 7
    IF      shift, and go to state 9
    WHILE   shift, and go to state 10
    FOR     shift, and go to state 11
    LET     shift, and go to state 12
    BREAK   shift, and go to state 13
    NIL     shift, and go to state 14

    LBRACK    [reduce using rule 95 (empty)]
    MINUS     [reduce using rule 95 (empty)]
    $default  reduce using rule 95 (empty)

    exp             go to state 118
    lvalue          go to state 25
    no_value_exp    go to state 26
    nil             go to state 27
    list            go to state 28
    int             go to state 29
    string          go to state 30
    function        go to state 31
    operation       go to state 32
    exp_operation   go to state 33
    bool_operation  go to state 34
    compare         go to state 35
    exp_compare     go to state 36
    string_compare  go to state 37
    new             go to state 38
    type_new        go to state 39
    array_new       go to state 40
    assign          go to state 41
    if_then         go to state 42
    if_then_else    go to state 43
    while_do        go to state 44
    for_to_do       go to state 45
    break           go to state 46
    let_in_end      go to state 47
    parentheses     go to state 48
    empty           go to state 49


state 90

   70 exp_compare: exp compare_op . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    LBRACK  shift, and go to state 61
    LBRACE  shift, and go to state 6
    MINUS   shift, and go to state 7
    IF      shift, and go to state 9
    WHILE   shift, and go to state 10
    FOR     shift, and go to state 11
    LET     shift, and go to state 12
    BREAK   shift, and go to state 13
    NIL     shift, and go to state 14

    LBRACK    [reduce using rule 95 (empty)]
    MINUS     [reduce using rule 95 (empty)]
    $default  reduce using rule 95 (empty)

    exp             go to state 119
    lvalue          go to state 25
    no_value_exp    go to state 26
    nil             go to state 27
    list            go to state 28
    int             go to state 29
    string          go to state 30
    function        go to state 31
    operation       go to state 32
    exp_operation   go to state 33
    bool_operation  go to state 34
    compare         go to state 35
    exp_compare     go to state 36
    string_compare  go to state 37
    new             go to state 38
    type_new        go to state 39
    array_new       go to state 40
    assign          go to state 41
    if_then         go to state 42
    if_then_else    go to state 43
    while_do        go to state 44
    for_to_do       go to state 45
    break           go to state 46
    let_in_end      go to state 47
    parentheses     go to state 48
    empty           go to state 49


state 91

   42 lvalue: lvalue LBRACK . exp RBRACK

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    LBRACK  shift, and go to state 61
    LBRACE  shift, and go to state 6
    MINUS   shift, and go to state 7
    IF      shift, and go to state 9
    WHILE   shift, and go to state 10
    FOR     shift, and go to state 11
    LET     shift, and go to state 12
    BREAK   shift, and go to state 13
    NIL     shift, and go to state 14

    MINUS     [reduce using rule 95 (empty)]
    $default  reduce using rule 95 (empty)

    exp             go to state 120
    lvalue          go to state 25
    no_value_exp    go to state 26
    nil             go to state 27
    list            go to state 28
    int             go to state 29
    string          go to state 30
    function        go to state 31
    operation       go to state 32
    exp_operation   go to state 33
    bool_operation  go to state 34
    compare         go to state 35
    exp_compare     go to state 36
    string_compare  go to state 37
    new             go to state 38
    type_new        go to state 39
    array_new       go to state 40
    assign          go to state 41
    if_then         go to state 42
    if_then_else    go to state 43
    while_do        go to state 44
    for_to_do       go to state 45
    break           go to state 46
    let_in_end      go to state 47
    parentheses     go to state 48
    empty           go to state 49


state 92

   41 lvalue: lvalue DOT . ID

    ID  shift, and go to state 121


state 93

   84 assign: lvalue ASSIGN . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    LBRACK  shift, and go to state 61
    LBRACE  shift, and go to state 6
    MINUS   shift, and go to state 7
    IF      shift, and go to state 9
    WHILE   shift, and go to state 10
    FOR     shift, and go to state 11
    LET     shift, and go to state 12
    BREAK   shift, and go to state 13
    NIL     shift, and go to state 14

    LBRACK    [reduce using rule 95 (empty)]
    MINUS     [reduce using rule 95 (empty)]
    $default  reduce using rule 95 (empty)

    exp             go to state 122
    lvalue          go to state 25
    no_value_exp    go to state 26
    nil             go to state 27
    list            go to state 28
    int             go to state 29
    string          go to state 30
    function        go to state 31
    operation       go to state 32
    exp_operation   go to state 33
    bool_operation  go to state 34
    compare         go to state 35
    exp_compare     go to state 36
    string_compare  go to state 37
    new             go to state 38
    type_new        go to state 39
    array_new       go to state 40
    assign          go to state 41
    if_then         go to state 42
    if_then_else    go to state 43
    while_do        go to state 44
    for_to_do       go to state 45
    break           go to state 46
    let_in_end      go to state 47
    parentheses     go to state 48
    empty           go to state 49


state 94

   54 function: ID LPAREN RPAREN .

    $default  reduce using rule 54 (function)


state 95

   57 function_exps: exp .
   60 exp_operation: exp . exp_op exp
   65 bool_operation: exp . bool_op exp
   70 exp_compare: exp . compare_op exp

    PLUS    shift, and go to state 82
    MINUS   shift, and go to state 83
    TIMES   shift, and go to state 84
    DIVIDE  shift, and go to state 85
    EQ      shift, and go to state 53
    NEQ     shift, and go to state 54
    LT      shift, and go to state 55
    LE      shift, and go to state 56
    GT      shift, and go to state 57
    GE      shift, and go to state 58
    AND     shift, and go to state 86
    OR      shift, and go to state 87

    $default  reduce using rule 57 (function_exps)

    exp_op      go to state 88
    bool_op     go to state 89
    compare_op  go to state 90


state 96

   55 function: ID LPAREN function_exps . RPAREN
   56 function_exps: function_exps . COMMA exp

    COMMA   shift, and go to state 123
    RPAREN  shift, and go to state 124


state 97

   60 exp_operation: exp . exp_op exp
   65 bool_operation: exp . bool_op exp
   70 exp_compare: exp . compare_op exp
   83 array_new: ID LBRACK exp . RBRACK OF exp

    RBRACK  shift, and go to state 125
    PLUS    shift, and go to state 82
    MINUS   shift, and go to state 83
    TIMES   shift, and go to state 84
    DIVIDE  shift, and go to state 85
    EQ      shift, and go to state 53
    NEQ     shift, and go to state 54
    LT      shift, and go to state 55
    LE      shift, and go to state 56
    GT      shift, and go to state 57
    GE      shift, and go to state 58
    AND     shift, and go to state 86
    OR      shift, and go to state 87

    exp_op      go to state 88
    bool_op     go to state 89
    compare_op  go to state 90


state 98

   82 type_new_exps: ID . EQ exp

    EQ  shift, and go to state 126


state 99

   80 type_new: ID LBRACE type_new_exps . RBRACE
   81 type_new_exps: type_new_exps . COMMA ID EQ exp

    COMMA   shift, and go to state 127
    RBRACE  shift, and go to state 128


state 100

   71 string_compare: STRING compare_op STRING .

    $default  reduce using rule 71 (string_compare)


state 101

   50 list_exps: exp SEMICOLON . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    LBRACK  shift, and go to state 61
    LBRACE  shift, and go to state 6
    MINUS   shift, and go to state 7
    IF      shift, and go to state 9
    WHILE   shift, and go to state 10
    FOR     shift, and go to state 11
    LET     shift, and go to state 12
    BREAK   shift, and go to state 13
    NIL     shift, and go to state 14

    MINUS     [reduce using rule 95 (empty)]
    $default  reduce using rule 95 (empty)

    exp             go to state 129
    lvalue          go to state 25
    no_value_exp    go to state 26
    nil             go to state 27
    list            go to state 28
    int             go to state 29
    string          go to state 30
    function        go to state 31
    operation       go to state 32
    exp_operation   go to state 33
    bool_operation  go to state 34
    compare         go to state 35
    exp_compare     go to state 36
    string_compare  go to state 37
    new             go to state 38
    type_new        go to state 39
    array_new       go to state 40
    assign          go to state 41
    if_then         go to state 42
    if_then_else    go to state 43
    while_do        go to state 44
    for_to_do       go to state 45
    break           go to state 46
    let_in_end      go to state 47
    parentheses     go to state 48
    empty           go to state 49


state 102

   94 parentheses: LPAREN exp RPAREN .

    $default  reduce using rule 94 (parentheses)


state 103

   49 list_exps: list_exps SEMICOLON . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    LBRACK  shift, and go to state 61
    LBRACE  shift, and go to state 6
    MINUS   shift, and go to state 7
    IF      shift, and go to state 9
    WHILE   shift, and go to state 10
    FOR     shift, and go to state 11
    LET     shift, and go to state 12
    BREAK   shift, and go to state 13
    NIL     shift, and go to state 14

    MINUS     [reduce using rule 95 (empty)]
    $default  reduce using rule 95 (empty)

    exp             go to state 130
    lvalue          go to state 25
    no_value_exp    go to state 26
    nil             go to state 27
    list            go to state 28
    int             go to state 29
    string          go to state 30
    function        go to state 31
    operation       go to state 32
    exp_operation   go to state 33
    bool_operation  go to state 34
    compare         go to state 35
    exp_compare     go to state 36
    string_compare  go to state 37
    new             go to state 38
    type_new        go to state 39
    array_new       go to state 40
    assign          go to state 41
    if_then         go to state 42
    if_then_else    go to state 43
    while_do        go to state 44
    for_to_do       go to state 45
    break           go to state 46
    let_in_end      go to state 47
    parentheses     go to state 48
    empty           go to state 49


state 104

   48 list: LPAREN list_exps RPAREN .

    $default  reduce using rule 48 (list)


state 105

   16 tyfield: ID COLON . ID

    ID  shift, and go to state 131


state 106

   14 tyfields: tyfields COMMA . tyfield

    ID  shift, and go to state 64

    $default  reduce using rule 95 (empty)

    tyfield  go to state 132
    empty    go to state 68


state 107

    9 tydec: LBRACK tyfields RBRACK .

    $default  reduce using rule 9 (tydec)


state 108

   10 tydec: ARRAY OF ID .

    $default  reduce using rule 10 (tydec)


state 109

   85 if_then: IF exp THEN . exp
   86 if_then_else: IF exp THEN . exp ELSE exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    LBRACK  shift, and go to state 61
    LBRACE  shift, and go to state 6
    MINUS   shift, and go to state 7
    IF      shift, and go to state 9
    WHILE   shift, and go to state 10
    FOR     shift, and go to state 11
    LET     shift, and go to state 12
    BREAK   shift, and go to state 13
    NIL     shift, and go to state 14

    LBRACK    [reduce using rule 95 (empty)]
    MINUS     [reduce using rule 95 (empty)]
    $default  reduce using rule 95 (empty)

    exp             go to state 133
    lvalue          go to state 25
    no_value_exp    go to state 26
    nil             go to state 27
    list            go to state 28
    int             go to state 29
    string          go to state 30
    function        go to state 31
    operation       go to state 32
    exp_operation   go to state 33
    bool_operation  go to state 34
    compare         go to state 35
    exp_compare     go to state 36
    string_compare  go to state 37
    new             go to state 38
    type_new        go to state 39
    array_new       go to state 40
    assign          go to state 41
    if_then         go to state 42
    if_then_else    go to state 43
    while_do        go to state 44
    for_to_do       go to state 45
    break           go to state 46
    let_in_end      go to state 47
    parentheses     go to state 48
    empty           go to state 49


state 110

   87 while_do: WHILE exp DO . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    LBRACK  shift, and go to state 61
    LBRACE  shift, and go to state 6
    MINUS   shift, and go to state 7
    IF      shift, and go to state 9
    WHILE   shift, and go to state 10
    FOR     shift, and go to state 11
    LET     shift, and go to state 12
    BREAK   shift, and go to state 13
    NIL     shift, and go to state 14

    LBRACK    [reduce using rule 95 (empty)]
    MINUS     [reduce using rule 95 (empty)]
    $default  reduce using rule 95 (empty)

    exp             go to state 134
    lvalue          go to state 25
    no_value_exp    go to state 26
    nil             go to state 27
    list            go to state 28
    int             go to state 29
    string          go to state 30
    function        go to state 31
    operation       go to state 32
    exp_operation   go to state 33
    bool_operation  go to state 34
    compare         go to state 35
    exp_compare     go to state 36
    string_compare  go to state 37
    new             go to state 38
    type_new        go to state 39
    array_new       go to state 40
    assign          go to state 41
    if_then         go to state 42
    if_then_else    go to state 43
    while_do        go to state 44
    for_to_do       go to state 45
    break           go to state 46
    let_in_end      go to state 47
    parentheses     go to state 48
    empty           go to state 49


state 111

   88 for_to_do: FOR exp TO . exp DO exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    LBRACK  shift, and go to state 61
    LBRACE  shift, and go to state 6
    MINUS   shift, and go to state 7
    IF      shift, and go to state 9
    WHILE   shift, and go to state 10
    FOR     shift, and go to state 11
    LET     shift, and go to state 12
    BREAK   shift, and go to state 13
    NIL     shift, and go to state 14

    MINUS     [reduce using rule 95 (empty)]
    $default  reduce using rule 95 (empty)

    exp             go to state 135
    lvalue          go to state 25
    no_value_exp    go to state 26
    nil             go to state 27
    list            go to state 28
    int             go to state 29
    string          go to state 30
    function        go to state 31
    operation       go to state 32
    exp_operation   go to state 33
    bool_operation  go to state 34
    compare         go to state 35
    exp_compare     go to state 36
    string_compare  go to state 37
    new             go to state 38
    type_new        go to state 39
    array_new       go to state 40
    assign          go to state 41
    if_then         go to state 42
    if_then_else    go to state 43
    while_do        go to state 44
    for_to_do       go to state 45
    break           go to state 46
    let_in_end      go to state 47
    parentheses     go to state 48
    empty           go to state 49


state 112

   90 let_in_end: LET decs IN . expseq END
   91           | LET decs IN . END

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    LBRACK  shift, and go to state 61
    LBRACE  shift, and go to state 6
    MINUS   shift, and go to state 7
    IF      shift, and go to state 9
    WHILE   shift, and go to state 10
    FOR     shift, and go to state 11
    LET     shift, and go to state 12
    END     shift, and go to state 136
    BREAK   shift, and go to state 13
    NIL     shift, and go to state 14

    MINUS     [reduce using rule 95 (empty)]
    END       [reduce using rule 95 (empty)]
    $default  reduce using rule 95 (empty)

    exp             go to state 137
    lvalue          go to state 25
    no_value_exp    go to state 26
    nil             go to state 27
    list            go to state 28
    int             go to state 29
    string          go to state 30
    function        go to state 31
    operation       go to state 32
    exp_operation   go to state 33
    bool_operation  go to state 34
    compare         go to state 35
    exp_compare     go to state 36
    string_compare  go to state 37
    new             go to state 38
    type_new        go to state 39
    array_new       go to state 40
    assign          go to state 41
    if_then         go to state 42
    if_then_else    go to state 43
    while_do        go to state 44
    for_to_do       go to state 45
    break           go to state 46
    let_in_end      go to state 47
    expseq          go to state 138
    parentheses     go to state 48
    empty           go to state 49


state 113

   20 fundec: FUNCTION ID LPAREN . tyfields RPAREN EQ exp
   21       | FUNCTION ID LPAREN . tyfields RPAREN COLON ID EQ exp

    ID  shift, and go to state 64

    $default  reduce using rule 95 (empty)

    tyfields  go to state 139
    tyfield   go to state 67
    empty     go to state 68


state 114

   19 vardec: VAR ID COLON . ID ASSIGN exp

    ID  shift, and go to state 140


state 115

   18 vardec: VAR ID ASSIGN . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    LBRACK  shift, and go to state 61
    LBRACE  shift, and go to state 6
    MINUS   shift, and go to state 7
    IF      shift, and go to state 9
    WHILE   shift, and go to state 10
    FOR     shift, and go to state 11
    LET     shift, and go to state 12
    BREAK   shift, and go to state 13
    NIL     shift, and go to state 14

    LBRACK    [reduce using rule 95 (empty)]
    MINUS     [reduce using rule 95 (empty)]
    $default  reduce using rule 95 (empty)

    exp             go to state 141
    lvalue          go to state 25
    no_value_exp    go to state 26
    nil             go to state 27
    list            go to state 28
    int             go to state 29
    string          go to state 30
    function        go to state 31
    operation       go to state 32
    exp_operation   go to state 33
    bool_operation  go to state 34
    compare         go to state 35
    exp_compare     go to state 36
    string_compare  go to state 37
    new             go to state 38
    type_new        go to state 39
    array_new       go to state 40
    assign          go to state 41
    if_then         go to state 42
    if_then_else    go to state 43
    while_do        go to state 44
    for_to_do       go to state 45
    break           go to state 46
    let_in_end      go to state 47
    parentheses     go to state 48
    empty           go to state 49


state 116

    8 tydec: TYPE ID EQ . ty

    ID      shift, and go to state 142
    LBRACE  shift, and go to state 143
    ARRAY   shift, and go to state 144

    ty  go to state 145


state 117

   60 exp_operation: exp . exp_op exp
   60              | exp exp_op exp .
   65 bool_operation: exp . bool_op exp
   70 exp_compare: exp . compare_op exp

    PLUS    shift, and go to state 82
    MINUS   shift, and go to state 83
    TIMES   shift, and go to state 84
    DIVIDE  shift, and go to state 85
    EQ      shift, and go to state 53
    NEQ     shift, and go to state 54
    LT      shift, and go to state 55
    LE      shift, and go to state 56
    GT      shift, and go to state 57
    GE      shift, and go to state 58
    AND     shift, and go to state 86
    OR      shift, and go to state 87

    PLUS      [reduce using rule 60 (exp_operation)]
    MINUS     [reduce using rule 60 (exp_operation)]
    TIMES     [reduce using rule 60 (exp_operation)]
    DIVIDE    [reduce using rule 60 (exp_operation)]
    EQ        [reduce using rule 60 (exp_operation)]
    NEQ       [reduce using rule 60 (exp_operation)]
    LT        [reduce using rule 60 (exp_operation)]
    LE        [reduce using rule 60 (exp_operation)]
    GT        [reduce using rule 60 (exp_operation)]
    GE        [reduce using rule 60 (exp_operation)]
    AND       [reduce using rule 60 (exp_operation)]
    OR        [reduce using rule 60 (exp_operation)]
    $default  reduce using rule 60 (exp_operation)

    exp_op      go to state 88
    bool_op     go to state 89
    compare_op  go to state 90


state 118

   60 exp_operation: exp . exp_op exp
   65 bool_operation: exp . bool_op exp
   65               | exp bool_op exp .
   70 exp_compare: exp . compare_op exp

    PLUS    shift, and go to state 82
    MINUS   shift, and go to state 83
    TIMES   shift, and go to state 84
    DIVIDE  shift, and go to state 85
    EQ      shift, and go to state 53
    NEQ     shift, and go to state 54
    LT      shift, and go to state 55
    LE      shift, and go to state 56
    GT      shift, and go to state 57
    GE      shift, and go to state 58
    AND     shift, and go to state 86
    OR      shift, and go to state 87

    PLUS      [reduce using rule 65 (bool_operation)]
    MINUS     [reduce using rule 65 (bool_operation)]
    TIMES     [reduce using rule 65 (bool_operation)]
    DIVIDE    [reduce using rule 65 (bool_operation)]
    EQ        [reduce using rule 65 (bool_operation)]
    NEQ       [reduce using rule 65 (bool_operation)]
    LT        [reduce using rule 65 (bool_operation)]
    LE        [reduce using rule 65 (bool_operation)]
    GT        [reduce using rule 65 (bool_operation)]
    GE        [reduce using rule 65 (bool_operation)]
    AND       [reduce using rule 65 (bool_operation)]
    OR        [reduce using rule 65 (bool_operation)]
    $default  reduce using rule 65 (bool_operation)

    exp_op      go to state 88
    bool_op     go to state 89
    compare_op  go to state 90


state 119

   60 exp_operation: exp . exp_op exp
   65 bool_operation: exp . bool_op exp
   70 exp_compare: exp . compare_op exp
   70            | exp compare_op exp .

    PLUS    shift, and go to state 82
    MINUS   shift, and go to state 83
    TIMES   shift, and go to state 84
    DIVIDE  shift, and go to state 85
    EQ      shift, and go to state 53
    NEQ     shift, and go to state 54
    LT      shift, and go to state 55
    LE      shift, and go to state 56
    GT      shift, and go to state 57
    GE      shift, and go to state 58
    AND     shift, and go to state 86
    OR      shift, and go to state 87

    PLUS      [reduce using rule 70 (exp_compare)]
    MINUS     [reduce using rule 70 (exp_compare)]
    TIMES     [reduce using rule 70 (exp_compare)]
    DIVIDE    [reduce using rule 70 (exp_compare)]
    EQ        [reduce using rule 70 (exp_compare)]
    NEQ       [reduce using rule 70 (exp_compare)]
    LT        [reduce using rule 70 (exp_compare)]
    LE        [reduce using rule 70 (exp_compare)]
    GT        [reduce using rule 70 (exp_compare)]
    GE        [reduce using rule 70 (exp_compare)]
    AND       [reduce using rule 70 (exp_compare)]
    OR        [reduce using rule 70 (exp_compare)]
    $default  reduce using rule 70 (exp_compare)

    exp_op      go to state 88
    bool_op     go to state 89
    compare_op  go to state 90


state 120

   42 lvalue: lvalue LBRACK exp . RBRACK
   60 exp_operation: exp . exp_op exp
   65 bool_operation: exp . bool_op exp
   70 exp_compare: exp . compare_op exp

    RBRACK  shift, and go to state 146
    PLUS    shift, and go to state 82
    MINUS   shift, and go to state 83
    TIMES   shift, and go to state 84
    DIVIDE  shift, and go to state 85
    EQ      shift, and go to state 53
    NEQ     shift, and go to state 54
    LT      shift, and go to state 55
    LE      shift, and go to state 56
    GT      shift, and go to state 57
    GE      shift, and go to state 58
    AND     shift, and go to state 86
    OR      shift, and go to state 87

    exp_op      go to state 88
    bool_op     go to state 89
    compare_op  go to state 90


state 121

   41 lvalue: lvalue DOT ID .

    $default  reduce using rule 41 (lvalue)


state 122

   60 exp_operation: exp . exp_op exp
   65 bool_operation: exp . bool_op exp
   70 exp_compare: exp . compare_op exp
   84 assign: lvalue ASSIGN exp .

    PLUS    shift, and go to state 82
    MINUS   shift, and go to state 83
    TIMES   shift, and go to state 84
    DIVIDE  shift, and go to state 85
    EQ      shift, and go to state 53
    NEQ     shift, and go to state 54
    LT      shift, and go to state 55
    LE      shift, and go to state 56
    GT      shift, and go to state 57
    GE      shift, and go to state 58
    AND     shift, and go to state 86
    OR      shift, and go to state 87

    PLUS      [reduce using rule 84 (assign)]
    MINUS     [reduce using rule 84 (assign)]
    TIMES     [reduce using rule 84 (assign)]
    DIVIDE    [reduce using rule 84 (assign)]
    EQ        [reduce using rule 84 (assign)]
    NEQ       [reduce using rule 84 (assign)]
    LT        [reduce using rule 84 (assign)]
    LE        [reduce using rule 84 (assign)]
    GT        [reduce using rule 84 (assign)]
    GE        [reduce using rule 84 (assign)]
    AND       [reduce using rule 84 (assign)]
    OR        [reduce using rule 84 (assign)]
    $default  reduce using rule 84 (assign)

    exp_op      go to state 88
    bool_op     go to state 89
    compare_op  go to state 90


state 123

   56 function_exps: function_exps COMMA . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    LBRACK  shift, and go to state 61
    LBRACE  shift, and go to state 6
    MINUS   shift, and go to state 7
    IF      shift, and go to state 9
    WHILE   shift, and go to state 10
    FOR     shift, and go to state 11
    LET     shift, and go to state 12
    BREAK   shift, and go to state 13
    NIL     shift, and go to state 14

    MINUS     [reduce using rule 95 (empty)]
    $default  reduce using rule 95 (empty)

    exp             go to state 147
    lvalue          go to state 25
    no_value_exp    go to state 26
    nil             go to state 27
    list            go to state 28
    int             go to state 29
    string          go to state 30
    function        go to state 31
    operation       go to state 32
    exp_operation   go to state 33
    bool_operation  go to state 34
    compare         go to state 35
    exp_compare     go to state 36
    string_compare  go to state 37
    new             go to state 38
    type_new        go to state 39
    array_new       go to state 40
    assign          go to state 41
    if_then         go to state 42
    if_then_else    go to state 43
    while_do        go to state 44
    for_to_do       go to state 45
    break           go to state 46
    let_in_end      go to state 47
    parentheses     go to state 48
    empty           go to state 49


state 124

   55 function: ID LPAREN function_exps RPAREN .

    $default  reduce using rule 55 (function)


state 125

   83 array_new: ID LBRACK exp RBRACK . OF exp

    OF  shift, and go to state 148


state 126

   82 type_new_exps: ID EQ . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    LBRACK  shift, and go to state 61
    LBRACE  shift, and go to state 6
    MINUS   shift, and go to state 7
    IF      shift, and go to state 9
    WHILE   shift, and go to state 10
    FOR     shift, and go to state 11
    LET     shift, and go to state 12
    BREAK   shift, and go to state 13
    NIL     shift, and go to state 14

    MINUS     [reduce using rule 95 (empty)]
    $default  reduce using rule 95 (empty)

    exp             go to state 149
    lvalue          go to state 25
    no_value_exp    go to state 26
    nil             go to state 27
    list            go to state 28
    int             go to state 29
    string          go to state 30
    function        go to state 31
    operation       go to state 32
    exp_operation   go to state 33
    bool_operation  go to state 34
    compare         go to state 35
    exp_compare     go to state 36
    string_compare  go to state 37
    new             go to state 38
    type_new        go to state 39
    array_new       go to state 40
    assign          go to state 41
    if_then         go to state 42
    if_then_else    go to state 43
    while_do        go to state 44
    for_to_do       go to state 45
    break           go to state 46
    let_in_end      go to state 47
    parentheses     go to state 48
    empty           go to state 49


state 127

   81 type_new_exps: type_new_exps COMMA . ID EQ exp

    ID  shift, and go to state 150


state 128

   80 type_new: ID LBRACE type_new_exps RBRACE .

    $default  reduce using rule 80 (type_new)


state 129

   50 list_exps: exp SEMICOLON exp .
   60 exp_operation: exp . exp_op exp
   65 bool_operation: exp . bool_op exp
   70 exp_compare: exp . compare_op exp

    PLUS    shift, and go to state 82
    MINUS   shift, and go to state 83
    TIMES   shift, and go to state 84
    DIVIDE  shift, and go to state 85
    EQ      shift, and go to state 53
    NEQ     shift, and go to state 54
    LT      shift, and go to state 55
    LE      shift, and go to state 56
    GT      shift, and go to state 57
    GE      shift, and go to state 58
    AND     shift, and go to state 86
    OR      shift, and go to state 87

    $default  reduce using rule 50 (list_exps)

    exp_op      go to state 88
    bool_op     go to state 89
    compare_op  go to state 90


state 130

   49 list_exps: list_exps SEMICOLON exp .
   60 exp_operation: exp . exp_op exp
   65 bool_operation: exp . bool_op exp
   70 exp_compare: exp . compare_op exp

    PLUS    shift, and go to state 82
    MINUS   shift, and go to state 83
    TIMES   shift, and go to state 84
    DIVIDE  shift, and go to state 85
    EQ      shift, and go to state 53
    NEQ     shift, and go to state 54
    LT      shift, and go to state 55
    LE      shift, and go to state 56
    GT      shift, and go to state 57
    GE      shift, and go to state 58
    AND     shift, and go to state 86
    OR      shift, and go to state 87

    $default  reduce using rule 49 (list_exps)

    exp_op      go to state 88
    bool_op     go to state 89
    compare_op  go to state 90


state 131

   16 tyfield: ID COLON ID .

    $default  reduce using rule 16 (tyfield)


state 132

   14 tyfields: tyfields COMMA tyfield .

    $default  reduce using rule 14 (tyfields)


state 133

   60 exp_operation: exp . exp_op exp
   65 bool_operation: exp . bool_op exp
   70 exp_compare: exp . compare_op exp
   85 if_then: IF exp THEN exp .
   86 if_then_else: IF exp THEN exp . ELSE exp

    PLUS    shift, and go to state 82
    MINUS   shift, and go to state 83
    TIMES   shift, and go to state 84
    DIVIDE  shift, and go to state 85
    EQ      shift, and go to state 53
    NEQ     shift, and go to state 54
    LT      shift, and go to state 55
    LE      shift, and go to state 56
    GT      shift, and go to state 57
    GE      shift, and go to state 58
    AND     shift, and go to state 86
    OR      shift, and go to state 87
    ELSE    shift, and go to state 151

    PLUS      [reduce using rule 85 (if_then)]
    MINUS     [reduce using rule 85 (if_then)]
    TIMES     [reduce using rule 85 (if_then)]
    DIVIDE    [reduce using rule 85 (if_then)]
    EQ        [reduce using rule 85 (if_then)]
    NEQ       [reduce using rule 85 (if_then)]
    LT        [reduce using rule 85 (if_then)]
    LE        [reduce using rule 85 (if_then)]
    GT        [reduce using rule 85 (if_then)]
    GE        [reduce using rule 85 (if_then)]
    AND       [reduce using rule 85 (if_then)]
    OR        [reduce using rule 85 (if_then)]
    ELSE      [reduce using rule 85 (if_then)]
    $default  reduce using rule 85 (if_then)

    exp_op      go to state 88
    bool_op     go to state 89
    compare_op  go to state 90


state 134

   60 exp_operation: exp . exp_op exp
   65 bool_operation: exp . bool_op exp
   70 exp_compare: exp . compare_op exp
   87 while_do: WHILE exp DO exp .

    PLUS    shift, and go to state 82
    MINUS   shift, and go to state 83
    TIMES   shift, and go to state 84
    DIVIDE  shift, and go to state 85
    EQ      shift, and go to state 53
    NEQ     shift, and go to state 54
    LT      shift, and go to state 55
    LE      shift, and go to state 56
    GT      shift, and go to state 57
    GE      shift, and go to state 58
    AND     shift, and go to state 86
    OR      shift, and go to state 87

    PLUS      [reduce using rule 87 (while_do)]
    MINUS     [reduce using rule 87 (while_do)]
    TIMES     [reduce using rule 87 (while_do)]
    DIVIDE    [reduce using rule 87 (while_do)]
    EQ        [reduce using rule 87 (while_do)]
    NEQ       [reduce using rule 87 (while_do)]
    LT        [reduce using rule 87 (while_do)]
    LE        [reduce using rule 87 (while_do)]
    GT        [reduce using rule 87 (while_do)]
    GE        [reduce using rule 87 (while_do)]
    AND       [reduce using rule 87 (while_do)]
    OR        [reduce using rule 87 (while_do)]
    $default  reduce using rule 87 (while_do)

    exp_op      go to state 88
    bool_op     go to state 89
    compare_op  go to state 90


state 135

   60 exp_operation: exp . exp_op exp
   65 bool_operation: exp . bool_op exp
   70 exp_compare: exp . compare_op exp
   88 for_to_do: FOR exp TO exp . DO exp

    PLUS    shift, and go to state 82
    MINUS   shift, and go to state 83
    TIMES   shift, and go to state 84
    DIVIDE  shift, and go to state 85
    EQ      shift, and go to state 53
    NEQ     shift, and go to state 54
    LT      shift, and go to state 55
    LE      shift, and go to state 56
    GT      shift, and go to state 57
    GE      shift, and go to state 58
    AND     shift, and go to state 86
    OR      shift, and go to state 87
    DO      shift, and go to state 152

    exp_op      go to state 88
    bool_op     go to state 89
    compare_op  go to state 90


state 136

   91 let_in_end: LET decs IN END .

    $default  reduce using rule 91 (let_in_end)


state 137

   60 exp_operation: exp . exp_op exp
   65 bool_operation: exp . bool_op exp
   70 exp_compare: exp . compare_op exp
   93 expseq: exp .

    PLUS    shift, and go to state 82
    MINUS   shift, and go to state 83
    TIMES   shift, and go to state 84
    DIVIDE  shift, and go to state 85
    EQ      shift, and go to state 53
    NEQ     shift, and go to state 54
    LT      shift, and go to state 55
    LE      shift, and go to state 56
    GT      shift, and go to state 57
    GE      shift, and go to state 58
    AND     shift, and go to state 86
    OR      shift, and go to state 87

    $default  reduce using rule 93 (expseq)

    exp_op      go to state 88
    bool_op     go to state 89
    compare_op  go to state 90


state 138

   90 let_in_end: LET decs IN expseq . END
   92 expseq: expseq . SEMICOLON exp

    SEMICOLON  shift, and go to state 153
    END        shift, and go to state 154


state 139

   14 tyfields: tyfields . COMMA tyfield
   20 fundec: FUNCTION ID LPAREN tyfields . RPAREN EQ exp
   21       | FUNCTION ID LPAREN tyfields . RPAREN COLON ID EQ exp

    COMMA   shift, and go to state 106
    RPAREN  shift, and go to state 155


state 140

   19 vardec: VAR ID COLON ID . ASSIGN exp

    ASSIGN  shift, and go to state 156


state 141

   18 vardec: VAR ID ASSIGN exp .
   60 exp_operation: exp . exp_op exp
   65 bool_operation: exp . bool_op exp
   70 exp_compare: exp . compare_op exp

    PLUS    shift, and go to state 82
    MINUS   shift, and go to state 83
    TIMES   shift, and go to state 84
    DIVIDE  shift, and go to state 85
    EQ      shift, and go to state 53
    NEQ     shift, and go to state 54
    LT      shift, and go to state 55
    LE      shift, and go to state 56
    GT      shift, and go to state 57
    GE      shift, and go to state 58
    AND     shift, and go to state 86
    OR      shift, and go to state 87

    $default  reduce using rule 18 (vardec)

    exp_op      go to state 88
    bool_op     go to state 89
    compare_op  go to state 90


state 142

   11 ty: ID .

    $default  reduce using rule 11 (ty)


state 143

   13 ty: LBRACE . tyfields RBRACE

    ID  shift, and go to state 64

    $default  reduce using rule 95 (empty)

    tyfields  go to state 157
    tyfield   go to state 67
    empty     go to state 68


state 144

   12 ty: ARRAY . OF ID

    OF  shift, and go to state 158


state 145

    8 tydec: TYPE ID EQ ty .

    $default  reduce using rule 8 (tydec)


state 146

   42 lvalue: lvalue LBRACK exp RBRACK .

    $default  reduce using rule 42 (lvalue)


state 147

   56 function_exps: function_exps COMMA exp .
   60 exp_operation: exp . exp_op exp
   65 bool_operation: exp . bool_op exp
   70 exp_compare: exp . compare_op exp

    PLUS    shift, and go to state 82
    MINUS   shift, and go to state 83
    TIMES   shift, and go to state 84
    DIVIDE  shift, and go to state 85
    EQ      shift, and go to state 53
    NEQ     shift, and go to state 54
    LT      shift, and go to state 55
    LE      shift, and go to state 56
    GT      shift, and go to state 57
    GE      shift, and go to state 58
    AND     shift, and go to state 86
    OR      shift, and go to state 87

    $default  reduce using rule 56 (function_exps)

    exp_op      go to state 88
    bool_op     go to state 89
    compare_op  go to state 90


state 148

   83 array_new: ID LBRACK exp RBRACK OF . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    LBRACK  shift, and go to state 61
    LBRACE  shift, and go to state 6
    MINUS   shift, and go to state 7
    IF      shift, and go to state 9
    WHILE   shift, and go to state 10
    FOR     shift, and go to state 11
    LET     shift, and go to state 12
    BREAK   shift, and go to state 13
    NIL     shift, and go to state 14

    LBRACK    [reduce using rule 95 (empty)]
    MINUS     [reduce using rule 95 (empty)]
    $default  reduce using rule 95 (empty)

    exp             go to state 159
    lvalue          go to state 25
    no_value_exp    go to state 26
    nil             go to state 27
    list            go to state 28
    int             go to state 29
    string          go to state 30
    function        go to state 31
    operation       go to state 32
    exp_operation   go to state 33
    bool_operation  go to state 34
    compare         go to state 35
    exp_compare     go to state 36
    string_compare  go to state 37
    new             go to state 38
    type_new        go to state 39
    array_new       go to state 40
    assign          go to state 41
    if_then         go to state 42
    if_then_else    go to state 43
    while_do        go to state 44
    for_to_do       go to state 45
    break           go to state 46
    let_in_end      go to state 47
    parentheses     go to state 48
    empty           go to state 49


state 149

   60 exp_operation: exp . exp_op exp
   65 bool_operation: exp . bool_op exp
   70 exp_compare: exp . compare_op exp
   82 type_new_exps: ID EQ exp .

    PLUS    shift, and go to state 82
    MINUS   shift, and go to state 83
    TIMES   shift, and go to state 84
    DIVIDE  shift, and go to state 85
    EQ      shift, and go to state 53
    NEQ     shift, and go to state 54
    LT      shift, and go to state 55
    LE      shift, and go to state 56
    GT      shift, and go to state 57
    GE      shift, and go to state 58
    AND     shift, and go to state 86
    OR      shift, and go to state 87

    $default  reduce using rule 82 (type_new_exps)

    exp_op      go to state 88
    bool_op     go to state 89
    compare_op  go to state 90


state 150

   81 type_new_exps: type_new_exps COMMA ID . EQ exp

    EQ  shift, and go to state 160


state 151

   86 if_then_else: IF exp THEN exp ELSE . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    LBRACK  shift, and go to state 61
    LBRACE  shift, and go to state 6
    MINUS   shift, and go to state 7
    IF      shift, and go to state 9
    WHILE   shift, and go to state 10
    FOR     shift, and go to state 11
    LET     shift, and go to state 12
    BREAK   shift, and go to state 13
    NIL     shift, and go to state 14

    LBRACK    [reduce using rule 95 (empty)]
    MINUS     [reduce using rule 95 (empty)]
    $default  reduce using rule 95 (empty)

    exp             go to state 161
    lvalue          go to state 25
    no_value_exp    go to state 26
    nil             go to state 27
    list            go to state 28
    int             go to state 29
    string          go to state 30
    function        go to state 31
    operation       go to state 32
    exp_operation   go to state 33
    bool_operation  go to state 34
    compare         go to state 35
    exp_compare     go to state 36
    string_compare  go to state 37
    new             go to state 38
    type_new        go to state 39
    array_new       go to state 40
    assign          go to state 41
    if_then         go to state 42
    if_then_else    go to state 43
    while_do        go to state 44
    for_to_do       go to state 45
    break           go to state 46
    let_in_end      go to state 47
    parentheses     go to state 48
    empty           go to state 49


state 152

   88 for_to_do: FOR exp TO exp DO . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    LBRACK  shift, and go to state 61
    LBRACE  shift, and go to state 6
    MINUS   shift, and go to state 7
    IF      shift, and go to state 9
    WHILE   shift, and go to state 10
    FOR     shift, and go to state 11
    LET     shift, and go to state 12
    BREAK   shift, and go to state 13
    NIL     shift, and go to state 14

    LBRACK    [reduce using rule 95 (empty)]
    MINUS     [reduce using rule 95 (empty)]
    $default  reduce using rule 95 (empty)

    exp             go to state 162
    lvalue          go to state 25
    no_value_exp    go to state 26
    nil             go to state 27
    list            go to state 28
    int             go to state 29
    string          go to state 30
    function        go to state 31
    operation       go to state 32
    exp_operation   go to state 33
    bool_operation  go to state 34
    compare         go to state 35
    exp_compare     go to state 36
    string_compare  go to state 37
    new             go to state 38
    type_new        go to state 39
    array_new       go to state 40
    assign          go to state 41
    if_then         go to state 42
    if_then_else    go to state 43
    while_do        go to state 44
    for_to_do       go to state 45
    break           go to state 46
    let_in_end      go to state 47
    parentheses     go to state 48
    empty           go to state 49


state 153

   92 expseq: expseq SEMICOLON . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    LBRACK  shift, and go to state 61
    LBRACE  shift, and go to state 6
    MINUS   shift, and go to state 7
    IF      shift, and go to state 9
    WHILE   shift, and go to state 10
    FOR     shift, and go to state 11
    LET     shift, and go to state 12
    BREAK   shift, and go to state 13
    NIL     shift, and go to state 14

    MINUS     [reduce using rule 95 (empty)]
    $default  reduce using rule 95 (empty)

    exp             go to state 163
    lvalue          go to state 25
    no_value_exp    go to state 26
    nil             go to state 27
    list            go to state 28
    int             go to state 29
    string          go to state 30
    function        go to state 31
    operation       go to state 32
    exp_operation   go to state 33
    bool_operation  go to state 34
    compare         go to state 35
    exp_compare     go to state 36
    string_compare  go to state 37
    new             go to state 38
    type_new        go to state 39
    array_new       go to state 40
    assign          go to state 41
    if_then         go to state 42
    if_then_else    go to state 43
    while_do        go to state 44
    for_to_do       go to state 45
    break           go to state 46
    let_in_end      go to state 47
    parentheses     go to state 48
    empty           go to state 49


state 154

   90 let_in_end: LET decs IN expseq END .

    $default  reduce using rule 90 (let_in_end)


state 155

   20 fundec: FUNCTION ID LPAREN tyfields RPAREN . EQ exp
   21       | FUNCTION ID LPAREN tyfields RPAREN . COLON ID EQ exp

    COLON  shift, and go to state 164
    EQ     shift, and go to state 165


state 156

   19 vardec: VAR ID COLON ID ASSIGN . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    LBRACK  shift, and go to state 61
    LBRACE  shift, and go to state 6
    MINUS   shift, and go to state 7
    IF      shift, and go to state 9
    WHILE   shift, and go to state 10
    FOR     shift, and go to state 11
    LET     shift, and go to state 12
    BREAK   shift, and go to state 13
    NIL     shift, and go to state 14

    LBRACK    [reduce using rule 95 (empty)]
    MINUS     [reduce using rule 95 (empty)]
    $default  reduce using rule 95 (empty)

    exp             go to state 166
    lvalue          go to state 25
    no_value_exp    go to state 26
    nil             go to state 27
    list            go to state 28
    int             go to state 29
    string          go to state 30
    function        go to state 31
    operation       go to state 32
    exp_operation   go to state 33
    bool_operation  go to state 34
    compare         go to state 35
    exp_compare     go to state 36
    string_compare  go to state 37
    new             go to state 38
    type_new        go to state 39
    array_new       go to state 40
    assign          go to state 41
    if_then         go to state 42
    if_then_else    go to state 43
    while_do        go to state 44
    for_to_do       go to state 45
    break           go to state 46
    let_in_end      go to state 47
    parentheses     go to state 48
    empty           go to state 49


state 157

   13 ty: LBRACE tyfields . RBRACE
   14 tyfields: tyfields . COMMA tyfield

    COMMA   shift, and go to state 106
    RBRACE  shift, and go to state 167


state 158

   12 ty: ARRAY OF . ID

    ID  shift, and go to state 168


state 159

   60 exp_operation: exp . exp_op exp
   65 bool_operation: exp . bool_op exp
   70 exp_compare: exp . compare_op exp
   83 array_new: ID LBRACK exp RBRACK OF exp .

    PLUS    shift, and go to state 82
    MINUS   shift, and go to state 83
    TIMES   shift, and go to state 84
    DIVIDE  shift, and go to state 85
    EQ      shift, and go to state 53
    NEQ     shift, and go to state 54
    LT      shift, and go to state 55
    LE      shift, and go to state 56
    GT      shift, and go to state 57
    GE      shift, and go to state 58
    AND     shift, and go to state 86
    OR      shift, and go to state 87

    PLUS      [reduce using rule 83 (array_new)]
    MINUS     [reduce using rule 83 (array_new)]
    TIMES     [reduce using rule 83 (array_new)]
    DIVIDE    [reduce using rule 83 (array_new)]
    EQ        [reduce using rule 83 (array_new)]
    NEQ       [reduce using rule 83 (array_new)]
    LT        [reduce using rule 83 (array_new)]
    LE        [reduce using rule 83 (array_new)]
    GT        [reduce using rule 83 (array_new)]
    GE        [reduce using rule 83 (array_new)]
    AND       [reduce using rule 83 (array_new)]
    OR        [reduce using rule 83 (array_new)]
    $default  reduce using rule 83 (array_new)

    exp_op      go to state 88
    bool_op     go to state 89
    compare_op  go to state 90


state 160

   81 type_new_exps: type_new_exps COMMA ID EQ . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    LBRACK  shift, and go to state 61
    LBRACE  shift, and go to state 6
    MINUS   shift, and go to state 7
    IF      shift, and go to state 9
    WHILE   shift, and go to state 10
    FOR     shift, and go to state 11
    LET     shift, and go to state 12
    BREAK   shift, and go to state 13
    NIL     shift, and go to state 14

    MINUS     [reduce using rule 95 (empty)]
    $default  reduce using rule 95 (empty)

    exp             go to state 169
    lvalue          go to state 25
    no_value_exp    go to state 26
    nil             go to state 27
    list            go to state 28
    int             go to state 29
    string          go to state 30
    function        go to state 31
    operation       go to state 32
    exp_operation   go to state 33
    bool_operation  go to state 34
    compare         go to state 35
    exp_compare     go to state 36
    string_compare  go to state 37
    new             go to state 38
    type_new        go to state 39
    array_new       go to state 40
    assign          go to state 41
    if_then         go to state 42
    if_then_else    go to state 43
    while_do        go to state 44
    for_to_do       go to state 45
    break           go to state 46
    let_in_end      go to state 47
    parentheses     go to state 48
    empty           go to state 49


state 161

   60 exp_operation: exp . exp_op exp
   65 bool_operation: exp . bool_op exp
   70 exp_compare: exp . compare_op exp
   86 if_then_else: IF exp THEN exp ELSE exp .

    PLUS    shift, and go to state 82
    MINUS   shift, and go to state 83
    TIMES   shift, and go to state 84
    DIVIDE  shift, and go to state 85
    EQ      shift, and go to state 53
    NEQ     shift, and go to state 54
    LT      shift, and go to state 55
    LE      shift, and go to state 56
    GT      shift, and go to state 57
    GE      shift, and go to state 58
    AND     shift, and go to state 86
    OR      shift, and go to state 87

    PLUS      [reduce using rule 86 (if_then_else)]
    MINUS     [reduce using rule 86 (if_then_else)]
    TIMES     [reduce using rule 86 (if_then_else)]
    DIVIDE    [reduce using rule 86 (if_then_else)]
    EQ        [reduce using rule 86 (if_then_else)]
    NEQ       [reduce using rule 86 (if_then_else)]
    LT        [reduce using rule 86 (if_then_else)]
    LE        [reduce using rule 86 (if_then_else)]
    GT        [reduce using rule 86 (if_then_else)]
    GE        [reduce using rule 86 (if_then_else)]
    AND       [reduce using rule 86 (if_then_else)]
    OR        [reduce using rule 86 (if_then_else)]
    $default  reduce using rule 86 (if_then_else)

    exp_op      go to state 88
    bool_op     go to state 89
    compare_op  go to state 90


state 162

   60 exp_operation: exp . exp_op exp
   65 bool_operation: exp . bool_op exp
   70 exp_compare: exp . compare_op exp
   88 for_to_do: FOR exp TO exp DO exp .

    PLUS    shift, and go to state 82
    MINUS   shift, and go to state 83
    TIMES   shift, and go to state 84
    DIVIDE  shift, and go to state 85
    EQ      shift, and go to state 53
    NEQ     shift, and go to state 54
    LT      shift, and go to state 55
    LE      shift, and go to state 56
    GT      shift, and go to state 57
    GE      shift, and go to state 58
    AND     shift, and go to state 86
    OR      shift, and go to state 87

    PLUS      [reduce using rule 88 (for_to_do)]
    MINUS     [reduce using rule 88 (for_to_do)]
    TIMES     [reduce using rule 88 (for_to_do)]
    DIVIDE    [reduce using rule 88 (for_to_do)]
    EQ        [reduce using rule 88 (for_to_do)]
    NEQ       [reduce using rule 88 (for_to_do)]
    LT        [reduce using rule 88 (for_to_do)]
    LE        [reduce using rule 88 (for_to_do)]
    GT        [reduce using rule 88 (for_to_do)]
    GE        [reduce using rule 88 (for_to_do)]
    AND       [reduce using rule 88 (for_to_do)]
    OR        [reduce using rule 88 (for_to_do)]
    $default  reduce using rule 88 (for_to_do)

    exp_op      go to state 88
    bool_op     go to state 89
    compare_op  go to state 90


state 163

   60 exp_operation: exp . exp_op exp
   65 bool_operation: exp . bool_op exp
   70 exp_compare: exp . compare_op exp
   92 expseq: expseq SEMICOLON exp .

    PLUS    shift, and go to state 82
    MINUS   shift, and go to state 83
    TIMES   shift, and go to state 84
    DIVIDE  shift, and go to state 85
    EQ      shift, and go to state 53
    NEQ     shift, and go to state 54
    LT      shift, and go to state 55
    LE      shift, and go to state 56
    GT      shift, and go to state 57
    GE      shift, and go to state 58
    AND     shift, and go to state 86
    OR      shift, and go to state 87

    $default  reduce using rule 92 (expseq)

    exp_op      go to state 88
    bool_op     go to state 89
    compare_op  go to state 90


state 164

   21 fundec: FUNCTION ID LPAREN tyfields RPAREN COLON . ID EQ exp

    ID  shift, and go to state 170


state 165

   20 fundec: FUNCTION ID LPAREN tyfields RPAREN EQ . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    LBRACK  shift, and go to state 61
    LBRACE  shift, and go to state 6
    MINUS   shift, and go to state 7
    IF      shift, and go to state 9
    WHILE   shift, and go to state 10
    FOR     shift, and go to state 11
    LET     shift, and go to state 12
    BREAK   shift, and go to state 13
    NIL     shift, and go to state 14

    LBRACK    [reduce using rule 95 (empty)]
    MINUS     [reduce using rule 95 (empty)]
    $default  reduce using rule 95 (empty)

    exp             go to state 171
    lvalue          go to state 25
    no_value_exp    go to state 26
    nil             go to state 27
    list            go to state 28
    int             go to state 29
    string          go to state 30
    function        go to state 31
    operation       go to state 32
    exp_operation   go to state 33
    bool_operation  go to state 34
    compare         go to state 35
    exp_compare     go to state 36
    string_compare  go to state 37
    new             go to state 38
    type_new        go to state 39
    array_new       go to state 40
    assign          go to state 41
    if_then         go to state 42
    if_then_else    go to state 43
    while_do        go to state 44
    for_to_do       go to state 45
    break           go to state 46
    let_in_end      go to state 47
    parentheses     go to state 48
    empty           go to state 49


state 166

   19 vardec: VAR ID COLON ID ASSIGN exp .
   60 exp_operation: exp . exp_op exp
   65 bool_operation: exp . bool_op exp
   70 exp_compare: exp . compare_op exp

    PLUS    shift, and go to state 82
    MINUS   shift, and go to state 83
    TIMES   shift, and go to state 84
    DIVIDE  shift, and go to state 85
    EQ      shift, and go to state 53
    NEQ     shift, and go to state 54
    LT      shift, and go to state 55
    LE      shift, and go to state 56
    GT      shift, and go to state 57
    GE      shift, and go to state 58
    AND     shift, and go to state 86
    OR      shift, and go to state 87

    $default  reduce using rule 19 (vardec)

    exp_op      go to state 88
    bool_op     go to state 89
    compare_op  go to state 90


state 167

   13 ty: LBRACE tyfields RBRACE .

    $default  reduce using rule 13 (ty)


state 168

   12 ty: ARRAY OF ID .

    $default  reduce using rule 12 (ty)


state 169

   60 exp_operation: exp . exp_op exp
   65 bool_operation: exp . bool_op exp
   70 exp_compare: exp . compare_op exp
   81 type_new_exps: type_new_exps COMMA ID EQ exp .

    PLUS    shift, and go to state 82
    MINUS   shift, and go to state 83
    TIMES   shift, and go to state 84
    DIVIDE  shift, and go to state 85
    EQ      shift, and go to state 53
    NEQ     shift, and go to state 54
    LT      shift, and go to state 55
    LE      shift, and go to state 56
    GT      shift, and go to state 57
    GE      shift, and go to state 58
    AND     shift, and go to state 86
    OR      shift, and go to state 87

    $default  reduce using rule 81 (type_new_exps)

    exp_op      go to state 88
    bool_op     go to state 89
    compare_op  go to state 90


state 170

   21 fundec: FUNCTION ID LPAREN tyfields RPAREN COLON ID . EQ exp

    EQ  shift, and go to state 172


state 171

   20 fundec: FUNCTION ID LPAREN tyfields RPAREN EQ exp .
   60 exp_operation: exp . exp_op exp
   65 bool_operation: exp . bool_op exp
   70 exp_compare: exp . compare_op exp

    PLUS    shift, and go to state 82
    MINUS   shift, and go to state 83
    TIMES   shift, and go to state 84
    DIVIDE  shift, and go to state 85
    EQ      shift, and go to state 53
    NEQ     shift, and go to state 54
    LT      shift, and go to state 55
    LE      shift, and go to state 56
    GT      shift, and go to state 57
    GE      shift, and go to state 58
    AND     shift, and go to state 86
    OR      shift, and go to state 87

    $default  reduce using rule 20 (fundec)

    exp_op      go to state 88
    bool_op     go to state 89
    compare_op  go to state 90


state 172

   21 fundec: FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    LBRACK  shift, and go to state 61
    LBRACE  shift, and go to state 6
    MINUS   shift, and go to state 7
    IF      shift, and go to state 9
    WHILE   shift, and go to state 10
    FOR     shift, and go to state 11
    LET     shift, and go to state 12
    BREAK   shift, and go to state 13
    NIL     shift, and go to state 14

    LBRACK    [reduce using rule 95 (empty)]
    MINUS     [reduce using rule 95 (empty)]
    $default  reduce using rule 95 (empty)

    exp             go to state 173
    lvalue          go to state 25
    no_value_exp    go to state 26
    nil             go to state 27
    list            go to state 28
    int             go to state 29
    string          go to state 30
    function        go to state 31
    operation       go to state 32
    exp_operation   go to state 33
    bool_operation  go to state 34
    compare         go to state 35
    exp_compare     go to state 36
    string_compare  go to state 37
    new             go to state 38
    type_new        go to state 39
    array_new       go to state 40
    assign          go to state 41
    if_then         go to state 42
    if_then_else    go to state 43
    while_do        go to state 44
    for_to_do       go to state 45
    break           go to state 46
    let_in_end      go to state 47
    parentheses     go to state 48
    empty           go to state 49


state 173

   21 fundec: FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp .
   60 exp_operation: exp . exp_op exp
   65 bool_operation: exp . bool_op exp
   70 exp_compare: exp . compare_op exp

    PLUS    shift, and go to state 82
    MINUS   shift, and go to state 83
    TIMES   shift, and go to state 84
    DIVIDE  shift, and go to state 85
    EQ      shift, and go to state 53
    NEQ     shift, and go to state 54
    LT      shift, and go to state 55
    LE      shift, and go to state 56
    GT      shift, and go to state 57
    GE      shift, and go to state 58
    AND     shift, and go to state 86
    OR      shift, and go to state 87

    $default  reduce using rule 21 (fundec)

    exp_op      go to state 88
    bool_op     go to state 89
    compare_op  go to state 90
