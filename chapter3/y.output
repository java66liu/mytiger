State 1 conflicts: 1 shift/reduce
State 4 conflicts: 1 shift/reduce
State 29 conflicts: 1 shift/reduce
State 33 conflicts: 8 shift/reduce
State 63 conflicts: 12 shift/reduce
State 75 conflicts: 12 shift/reduce
State 78 conflicts: 12 shift/reduce
State 82 conflicts: 13 shift/reduce
State 83 conflicts: 12 shift/reduce
State 91 conflicts: 1 shift/reduce, 1 reduce/reduce
State 111 conflicts: 12 shift/reduce
State 125 conflicts: 12 shift/reduce


Grammar

    0 $accept: program $end

    1 program: decs
    2        | exp

    3 decs: decs dec
    4     | dec

    5 dec: tydec
    6    | vardec
    7    | fundec

    8 typeid: ID

    9 tydec: TYPE typeid EQ ty

   10 ty: typeid
   11   | ARRAY OF typeid
   12   | LBRACE tyfields RBRACE

   13 tyfield: ID COLON typeid
   14        | /* empty */

   15 tyfields: tyfields COMMA tyfield
   16         | tyfield

   17 vardec: VAR ID ASSIGN exp2
   18       | VAR ID COLON typeid ASSIGN exp2

   19 exp2: exp
   20     | typeid LBRACK exp RBRACK OF exp

   21 exp: lvalue
   22    | NIL
   23    | list
   24    | LPAREN RPAREN
   25    | LBRACK RBRACK
   26    | LBRACE RBRACE
   27    | INT
   28    | MINUS exp
   29    | STRING
   30    | ID LPAREN RPAREN
   31    | ID LPAREN exps RPAREN
   32    | exp op exp
   33    | ID ASSIGN exp
   34    | IF exp THEN exp ELSE exp
   35    | IF exp THEN exp
   36    | WHILE exp DO exp
   37    | FOR ID ASSIGN exp TO exp DO exp
   38    | BREAK
   39    | LET decs IN expseq END
   40    | LPAREN exp RPAREN
   41    | lvalue ASSIGN exp

   42 op: PLUS
   43   | MINUS
   44   | TIMES
   45   | DIVIDE
   46   | EQ
   47   | NEQ
   48   | LT
   49   | LE
   50   | GT
   51   | GE
   52   | AND
   53   | OR

   54 exps: exps COMMA exp
   55     | exp

   56 expseq: expseq SEMICOLON exp
   57       | exp
   58       | /* empty */

   59 lvalue: lvalue LBRACK exp RBRACK
   60       | lvalue DOT ID
   61       | ID

   62 list: LPAREN expseq RPAREN

   63 fundec: FUNCTION ID LPAREN tyfields RPAREN EQ exp
   64       | FUNCTION ID LPAREN tyfields RPAREN COLON typeid EQ exp


Terminals, with rules where they appear

$end (0) 0
error (256)
ID (258) 8 13 17 18 30 31 33 37 60 61 63 64
STRING (259) 29
INT (260) 27
COMMA (261) 15 54
COLON (262) 13 18 64
SEMICOLON (263) 56
LPAREN (264) 24 30 31 40 62 63 64
RPAREN (265) 24 30 31 40 62 63 64
LBRACK (266) 20 25 59
RBRACK (267) 20 25 59
LBRACE (268) 12 26
RBRACE (269) 12 26
DOT (270) 60
PLUS (271) 42
MINUS (272) 28 43
TIMES (273) 44
DIVIDE (274) 45
EQ (275) 9 46 63 64
NEQ (276) 47
LT (277) 48
LE (278) 49
GT (279) 50
GE (280) 51
AND (281) 52
OR (282) 53
ASSIGN (283) 17 18 33 37 41
ARRAY (284) 11
IF (285) 34 35
THEN (286) 34 35
ELSE (287) 34
WHILE (288) 36
FOR (289) 37
TO (290) 37
DO (291) 36 37
LET (292) 39
IN (293) 39
END (294) 39
OF (295) 11 20
BREAK (296) 38
NIL (297) 22
FUNCTION (298) 63 64
VAR (299) 17 18
TYPE (300) 9


Nonterminals, with rules where they appear

$accept (46)
    on left: 0
program (47)
    on left: 1 2, on right: 0
decs (48)
    on left: 3 4, on right: 1 3 39
dec (49)
    on left: 5 6 7, on right: 3 4
typeid (50)
    on left: 8, on right: 9 10 11 13 18 20 64
tydec (51)
    on left: 9, on right: 5
ty (52)
    on left: 10 11 12, on right: 9
tyfield (53)
    on left: 13 14, on right: 15 16
tyfields (54)
    on left: 15 16, on right: 12 15 63 64
vardec (55)
    on left: 17 18, on right: 6
exp2 (56)
    on left: 19 20, on right: 17 18
exp (57)
    on left: 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38
    39 40 41, on right: 2 19 20 28 32 33 34 35 36 37 40 41 54 55 56
    57 59 63 64
op (58)
    on left: 42 43 44 45 46 47 48 49 50 51 52 53, on right: 32
exps (59)
    on left: 54 55, on right: 31 54
expseq (60)
    on left: 56 57 58, on right: 39 56 62
lvalue (61)
    on left: 59 60 61, on right: 21 41 59 60
list (62)
    on left: 62, on right: 23
fundec (63)
    on left: 63 64, on right: 7


state 0

    0 $accept: . program $end

    ID        shift, and go to state 1
    STRING    shift, and go to state 2
    INT       shift, and go to state 3
    LPAREN    shift, and go to state 4
    LBRACK    shift, and go to state 5
    LBRACE    shift, and go to state 6
    MINUS     shift, and go to state 7
    IF        shift, and go to state 8
    WHILE     shift, and go to state 9
    FOR       shift, and go to state 10
    LET       shift, and go to state 11
    BREAK     shift, and go to state 12
    NIL       shift, and go to state 13
    FUNCTION  shift, and go to state 14
    VAR       shift, and go to state 15
    TYPE      shift, and go to state 16

    program  go to state 17
    decs     go to state 18
    dec      go to state 19
    tydec    go to state 20
    vardec   go to state 21
    exp      go to state 22
    lvalue   go to state 23
    list     go to state 24
    fundec   go to state 25


state 1

   30 exp: ID . LPAREN RPAREN
   31    | ID . LPAREN exps RPAREN
   33    | ID . ASSIGN exp
   61 lvalue: ID .

    LPAREN  shift, and go to state 26
    ASSIGN  shift, and go to state 27

    ASSIGN    [reduce using rule 61 (lvalue)]
    $default  reduce using rule 61 (lvalue)


state 2

   29 exp: STRING .

    $default  reduce using rule 29 (exp)


state 3

   27 exp: INT .

    $default  reduce using rule 27 (exp)


state 4

   24 exp: LPAREN . RPAREN
   40    | LPAREN . exp RPAREN
   62 list: LPAREN . expseq RPAREN

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    RPAREN  shift, and go to state 28
    LBRACK  shift, and go to state 5
    LBRACE  shift, and go to state 6
    MINUS   shift, and go to state 7
    IF      shift, and go to state 8
    WHILE   shift, and go to state 9
    FOR     shift, and go to state 10
    LET     shift, and go to state 11
    BREAK   shift, and go to state 12
    NIL     shift, and go to state 13

    RPAREN    [reduce using rule 58 (expseq)]
    $default  reduce using rule 58 (expseq)

    exp     go to state 29
    expseq  go to state 30
    lvalue  go to state 23
    list    go to state 24


state 5

   25 exp: LBRACK . RBRACK

    RBRACK  shift, and go to state 31


state 6

   26 exp: LBRACE . RBRACE

    RBRACE  shift, and go to state 32


state 7

   28 exp: MINUS . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    LBRACK  shift, and go to state 5
    LBRACE  shift, and go to state 6
    MINUS   shift, and go to state 7
    IF      shift, and go to state 8
    WHILE   shift, and go to state 9
    FOR     shift, and go to state 10
    LET     shift, and go to state 11
    BREAK   shift, and go to state 12
    NIL     shift, and go to state 13

    exp     go to state 33
    lvalue  go to state 23
    list    go to state 24


state 8

   34 exp: IF . exp THEN exp ELSE exp
   35    | IF . exp THEN exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    LBRACK  shift, and go to state 5
    LBRACE  shift, and go to state 6
    MINUS   shift, and go to state 7
    IF      shift, and go to state 8
    WHILE   shift, and go to state 9
    FOR     shift, and go to state 10
    LET     shift, and go to state 11
    BREAK   shift, and go to state 12
    NIL     shift, and go to state 13

    exp     go to state 34
    lvalue  go to state 23
    list    go to state 24


state 9

   36 exp: WHILE . exp DO exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    LBRACK  shift, and go to state 5
    LBRACE  shift, and go to state 6
    MINUS   shift, and go to state 7
    IF      shift, and go to state 8
    WHILE   shift, and go to state 9
    FOR     shift, and go to state 10
    LET     shift, and go to state 11
    BREAK   shift, and go to state 12
    NIL     shift, and go to state 13

    exp     go to state 35
    lvalue  go to state 23
    list    go to state 24


state 10

   37 exp: FOR . ID ASSIGN exp TO exp DO exp

    ID  shift, and go to state 36


state 11

   39 exp: LET . decs IN expseq END

    FUNCTION  shift, and go to state 14
    VAR       shift, and go to state 15
    TYPE      shift, and go to state 16

    decs    go to state 37
    dec     go to state 19
    tydec   go to state 20
    vardec  go to state 21
    fundec  go to state 25


state 12

   38 exp: BREAK .

    $default  reduce using rule 38 (exp)


state 13

   22 exp: NIL .

    $default  reduce using rule 22 (exp)


state 14

   63 fundec: FUNCTION . ID LPAREN tyfields RPAREN EQ exp
   64       | FUNCTION . ID LPAREN tyfields RPAREN COLON typeid EQ exp

    ID  shift, and go to state 38


state 15

   17 vardec: VAR . ID ASSIGN exp2
   18       | VAR . ID COLON typeid ASSIGN exp2

    ID  shift, and go to state 39


state 16

    9 tydec: TYPE . typeid EQ ty

    ID  shift, and go to state 40

    typeid  go to state 41


state 17

    0 $accept: program . $end

    $end  shift, and go to state 42


state 18

    1 program: decs .
    3 decs: decs . dec

    FUNCTION  shift, and go to state 14
    VAR       shift, and go to state 15
    TYPE      shift, and go to state 16

    $default  reduce using rule 1 (program)

    dec     go to state 43
    tydec   go to state 20
    vardec  go to state 21
    fundec  go to state 25


state 19

    4 decs: dec .

    $default  reduce using rule 4 (decs)


state 20

    5 dec: tydec .

    $default  reduce using rule 5 (dec)


state 21

    6 dec: vardec .

    $default  reduce using rule 6 (dec)


state 22

    2 program: exp .
   32 exp: exp . op exp

    PLUS    shift, and go to state 44
    MINUS   shift, and go to state 45
    TIMES   shift, and go to state 46
    DIVIDE  shift, and go to state 47
    EQ      shift, and go to state 48
    NEQ     shift, and go to state 49
    LT      shift, and go to state 50
    LE      shift, and go to state 51
    GT      shift, and go to state 52
    GE      shift, and go to state 53
    AND     shift, and go to state 54
    OR      shift, and go to state 55

    $default  reduce using rule 2 (program)

    op  go to state 56


state 23

   21 exp: lvalue .
   41    | lvalue . ASSIGN exp
   59 lvalue: lvalue . LBRACK exp RBRACK
   60       | lvalue . DOT ID

    LBRACK  shift, and go to state 57
    DOT     shift, and go to state 58
    ASSIGN  shift, and go to state 59

    $default  reduce using rule 21 (exp)


state 24

   23 exp: list .

    $default  reduce using rule 23 (exp)


state 25

    7 dec: fundec .

    $default  reduce using rule 7 (dec)


state 26

   30 exp: ID LPAREN . RPAREN
   31    | ID LPAREN . exps RPAREN

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    RPAREN  shift, and go to state 60
    LBRACK  shift, and go to state 5
    LBRACE  shift, and go to state 6
    MINUS   shift, and go to state 7
    IF      shift, and go to state 8
    WHILE   shift, and go to state 9
    FOR     shift, and go to state 10
    LET     shift, and go to state 11
    BREAK   shift, and go to state 12
    NIL     shift, and go to state 13

    exp     go to state 61
    exps    go to state 62
    lvalue  go to state 23
    list    go to state 24


state 27

   33 exp: ID ASSIGN . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    LBRACK  shift, and go to state 5
    LBRACE  shift, and go to state 6
    MINUS   shift, and go to state 7
    IF      shift, and go to state 8
    WHILE   shift, and go to state 9
    FOR     shift, and go to state 10
    LET     shift, and go to state 11
    BREAK   shift, and go to state 12
    NIL     shift, and go to state 13

    exp     go to state 63
    lvalue  go to state 23
    list    go to state 24


state 28

   24 exp: LPAREN RPAREN .

    $default  reduce using rule 24 (exp)


state 29

   32 exp: exp . op exp
   40    | LPAREN exp . RPAREN
   57 expseq: exp .

    RPAREN  shift, and go to state 64
    PLUS    shift, and go to state 44
    MINUS   shift, and go to state 45
    TIMES   shift, and go to state 46
    DIVIDE  shift, and go to state 47
    EQ      shift, and go to state 48
    NEQ     shift, and go to state 49
    LT      shift, and go to state 50
    LE      shift, and go to state 51
    GT      shift, and go to state 52
    GE      shift, and go to state 53
    AND     shift, and go to state 54
    OR      shift, and go to state 55

    RPAREN    [reduce using rule 57 (expseq)]
    $default  reduce using rule 57 (expseq)

    op  go to state 56


state 30

   56 expseq: expseq . SEMICOLON exp
   62 list: LPAREN expseq . RPAREN

    SEMICOLON  shift, and go to state 65
    RPAREN     shift, and go to state 66


state 31

   25 exp: LBRACK RBRACK .

    $default  reduce using rule 25 (exp)


state 32

   26 exp: LBRACE RBRACE .

    $default  reduce using rule 26 (exp)


state 33

   28 exp: MINUS exp .
   32    | exp . op exp

    TIMES   shift, and go to state 46
    DIVIDE  shift, and go to state 47
    EQ      shift, and go to state 48
    NEQ     shift, and go to state 49
    LT      shift, and go to state 50
    LE      shift, and go to state 51
    GT      shift, and go to state 52
    GE      shift, and go to state 53
    AND     shift, and go to state 54
    OR      shift, and go to state 55

    EQ        [reduce using rule 28 (exp)]
    NEQ       [reduce using rule 28 (exp)]
    LT        [reduce using rule 28 (exp)]
    LE        [reduce using rule 28 (exp)]
    GT        [reduce using rule 28 (exp)]
    GE        [reduce using rule 28 (exp)]
    AND       [reduce using rule 28 (exp)]
    OR        [reduce using rule 28 (exp)]
    $default  reduce using rule 28 (exp)

    op  go to state 56


state 34

   32 exp: exp . op exp
   34    | IF exp . THEN exp ELSE exp
   35    | IF exp . THEN exp

    PLUS    shift, and go to state 44
    MINUS   shift, and go to state 45
    TIMES   shift, and go to state 46
    DIVIDE  shift, and go to state 47
    EQ      shift, and go to state 48
    NEQ     shift, and go to state 49
    LT      shift, and go to state 50
    LE      shift, and go to state 51
    GT      shift, and go to state 52
    GE      shift, and go to state 53
    AND     shift, and go to state 54
    OR      shift, and go to state 55
    THEN    shift, and go to state 67

    op  go to state 56


state 35

   32 exp: exp . op exp
   36    | WHILE exp . DO exp

    PLUS    shift, and go to state 44
    MINUS   shift, and go to state 45
    TIMES   shift, and go to state 46
    DIVIDE  shift, and go to state 47
    EQ      shift, and go to state 48
    NEQ     shift, and go to state 49
    LT      shift, and go to state 50
    LE      shift, and go to state 51
    GT      shift, and go to state 52
    GE      shift, and go to state 53
    AND     shift, and go to state 54
    OR      shift, and go to state 55
    DO      shift, and go to state 68

    op  go to state 56


state 36

   37 exp: FOR ID . ASSIGN exp TO exp DO exp

    ASSIGN  shift, and go to state 69


state 37

    3 decs: decs . dec
   39 exp: LET decs . IN expseq END

    IN        shift, and go to state 70
    FUNCTION  shift, and go to state 14
    VAR       shift, and go to state 15
    TYPE      shift, and go to state 16

    dec     go to state 43
    tydec   go to state 20
    vardec  go to state 21
    fundec  go to state 25


state 38

   63 fundec: FUNCTION ID . LPAREN tyfields RPAREN EQ exp
   64       | FUNCTION ID . LPAREN tyfields RPAREN COLON typeid EQ exp

    LPAREN  shift, and go to state 71


state 39

   17 vardec: VAR ID . ASSIGN exp2
   18       | VAR ID . COLON typeid ASSIGN exp2

    COLON   shift, and go to state 72
    ASSIGN  shift, and go to state 73


state 40

    8 typeid: ID .

    $default  reduce using rule 8 (typeid)


state 41

    9 tydec: TYPE typeid . EQ ty

    EQ  shift, and go to state 74


state 42

    0 $accept: program $end .

    $default  accept


state 43

    3 decs: decs dec .

    $default  reduce using rule 3 (decs)


state 44

   42 op: PLUS .

    $default  reduce using rule 42 (op)


state 45

   43 op: MINUS .

    $default  reduce using rule 43 (op)


state 46

   44 op: TIMES .

    $default  reduce using rule 44 (op)


state 47

   45 op: DIVIDE .

    $default  reduce using rule 45 (op)


state 48

   46 op: EQ .

    $default  reduce using rule 46 (op)


state 49

   47 op: NEQ .

    $default  reduce using rule 47 (op)


state 50

   48 op: LT .

    $default  reduce using rule 48 (op)


state 51

   49 op: LE .

    $default  reduce using rule 49 (op)


state 52

   50 op: GT .

    $default  reduce using rule 50 (op)


state 53

   51 op: GE .

    $default  reduce using rule 51 (op)


state 54

   52 op: AND .

    $default  reduce using rule 52 (op)


state 55

   53 op: OR .

    $default  reduce using rule 53 (op)


state 56

   32 exp: exp op . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    LBRACK  shift, and go to state 5
    LBRACE  shift, and go to state 6
    MINUS   shift, and go to state 7
    IF      shift, and go to state 8
    WHILE   shift, and go to state 9
    FOR     shift, and go to state 10
    LET     shift, and go to state 11
    BREAK   shift, and go to state 12
    NIL     shift, and go to state 13

    exp     go to state 75
    lvalue  go to state 23
    list    go to state 24


state 57

   59 lvalue: lvalue LBRACK . exp RBRACK

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    LBRACK  shift, and go to state 5
    LBRACE  shift, and go to state 6
    MINUS   shift, and go to state 7
    IF      shift, and go to state 8
    WHILE   shift, and go to state 9
    FOR     shift, and go to state 10
    LET     shift, and go to state 11
    BREAK   shift, and go to state 12
    NIL     shift, and go to state 13

    exp     go to state 76
    lvalue  go to state 23
    list    go to state 24


state 58

   60 lvalue: lvalue DOT . ID

    ID  shift, and go to state 77


state 59

   41 exp: lvalue ASSIGN . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    LBRACK  shift, and go to state 5
    LBRACE  shift, and go to state 6
    MINUS   shift, and go to state 7
    IF      shift, and go to state 8
    WHILE   shift, and go to state 9
    FOR     shift, and go to state 10
    LET     shift, and go to state 11
    BREAK   shift, and go to state 12
    NIL     shift, and go to state 13

    exp     go to state 78
    lvalue  go to state 23
    list    go to state 24


state 60

   30 exp: ID LPAREN RPAREN .

    $default  reduce using rule 30 (exp)


state 61

   32 exp: exp . op exp
   55 exps: exp .

    PLUS    shift, and go to state 44
    MINUS   shift, and go to state 45
    TIMES   shift, and go to state 46
    DIVIDE  shift, and go to state 47
    EQ      shift, and go to state 48
    NEQ     shift, and go to state 49
    LT      shift, and go to state 50
    LE      shift, and go to state 51
    GT      shift, and go to state 52
    GE      shift, and go to state 53
    AND     shift, and go to state 54
    OR      shift, and go to state 55

    $default  reduce using rule 55 (exps)

    op  go to state 56


state 62

   31 exp: ID LPAREN exps . RPAREN
   54 exps: exps . COMMA exp

    COMMA   shift, and go to state 79
    RPAREN  shift, and go to state 80


state 63

   32 exp: exp . op exp
   33    | ID ASSIGN exp .

    PLUS    shift, and go to state 44
    MINUS   shift, and go to state 45
    TIMES   shift, and go to state 46
    DIVIDE  shift, and go to state 47
    EQ      shift, and go to state 48
    NEQ     shift, and go to state 49
    LT      shift, and go to state 50
    LE      shift, and go to state 51
    GT      shift, and go to state 52
    GE      shift, and go to state 53
    AND     shift, and go to state 54
    OR      shift, and go to state 55

    PLUS      [reduce using rule 33 (exp)]
    MINUS     [reduce using rule 33 (exp)]
    TIMES     [reduce using rule 33 (exp)]
    DIVIDE    [reduce using rule 33 (exp)]
    EQ        [reduce using rule 33 (exp)]
    NEQ       [reduce using rule 33 (exp)]
    LT        [reduce using rule 33 (exp)]
    LE        [reduce using rule 33 (exp)]
    GT        [reduce using rule 33 (exp)]
    GE        [reduce using rule 33 (exp)]
    AND       [reduce using rule 33 (exp)]
    OR        [reduce using rule 33 (exp)]
    $default  reduce using rule 33 (exp)

    op  go to state 56


state 64

   40 exp: LPAREN exp RPAREN .

    $default  reduce using rule 40 (exp)


state 65

   56 expseq: expseq SEMICOLON . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    LBRACK  shift, and go to state 5
    LBRACE  shift, and go to state 6
    MINUS   shift, and go to state 7
    IF      shift, and go to state 8
    WHILE   shift, and go to state 9
    FOR     shift, and go to state 10
    LET     shift, and go to state 11
    BREAK   shift, and go to state 12
    NIL     shift, and go to state 13

    exp     go to state 81
    lvalue  go to state 23
    list    go to state 24


state 66

   62 list: LPAREN expseq RPAREN .

    $default  reduce using rule 62 (list)


state 67

   34 exp: IF exp THEN . exp ELSE exp
   35    | IF exp THEN . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    LBRACK  shift, and go to state 5
    LBRACE  shift, and go to state 6
    MINUS   shift, and go to state 7
    IF      shift, and go to state 8
    WHILE   shift, and go to state 9
    FOR     shift, and go to state 10
    LET     shift, and go to state 11
    BREAK   shift, and go to state 12
    NIL     shift, and go to state 13

    exp     go to state 82
    lvalue  go to state 23
    list    go to state 24


state 68

   36 exp: WHILE exp DO . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    LBRACK  shift, and go to state 5
    LBRACE  shift, and go to state 6
    MINUS   shift, and go to state 7
    IF      shift, and go to state 8
    WHILE   shift, and go to state 9
    FOR     shift, and go to state 10
    LET     shift, and go to state 11
    BREAK   shift, and go to state 12
    NIL     shift, and go to state 13

    exp     go to state 83
    lvalue  go to state 23
    list    go to state 24


state 69

   37 exp: FOR ID ASSIGN . exp TO exp DO exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    LBRACK  shift, and go to state 5
    LBRACE  shift, and go to state 6
    MINUS   shift, and go to state 7
    IF      shift, and go to state 8
    WHILE   shift, and go to state 9
    FOR     shift, and go to state 10
    LET     shift, and go to state 11
    BREAK   shift, and go to state 12
    NIL     shift, and go to state 13

    exp     go to state 84
    lvalue  go to state 23
    list    go to state 24


state 70

   39 exp: LET decs IN . expseq END

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    LBRACK  shift, and go to state 5
    LBRACE  shift, and go to state 6
    MINUS   shift, and go to state 7
    IF      shift, and go to state 8
    WHILE   shift, and go to state 9
    FOR     shift, and go to state 10
    LET     shift, and go to state 11
    BREAK   shift, and go to state 12
    NIL     shift, and go to state 13

    $default  reduce using rule 58 (expseq)

    exp     go to state 85
    expseq  go to state 86
    lvalue  go to state 23
    list    go to state 24


state 71

   63 fundec: FUNCTION ID LPAREN . tyfields RPAREN EQ exp
   64       | FUNCTION ID LPAREN . tyfields RPAREN COLON typeid EQ exp

    ID  shift, and go to state 87

    $default  reduce using rule 14 (tyfield)

    tyfield   go to state 88
    tyfields  go to state 89


state 72

   18 vardec: VAR ID COLON . typeid ASSIGN exp2

    ID  shift, and go to state 40

    typeid  go to state 90


state 73

   17 vardec: VAR ID ASSIGN . exp2

    ID      shift, and go to state 91
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    LBRACK  shift, and go to state 5
    LBRACE  shift, and go to state 6
    MINUS   shift, and go to state 7
    IF      shift, and go to state 8
    WHILE   shift, and go to state 9
    FOR     shift, and go to state 10
    LET     shift, and go to state 11
    BREAK   shift, and go to state 12
    NIL     shift, and go to state 13

    typeid  go to state 92
    exp2    go to state 93
    exp     go to state 94
    lvalue  go to state 23
    list    go to state 24


state 74

    9 tydec: TYPE typeid EQ . ty

    ID      shift, and go to state 40
    LBRACE  shift, and go to state 95
    ARRAY   shift, and go to state 96

    typeid  go to state 97
    ty      go to state 98


state 75

   32 exp: exp . op exp
   32    | exp op exp .

    PLUS    shift, and go to state 44
    MINUS   shift, and go to state 45
    TIMES   shift, and go to state 46
    DIVIDE  shift, and go to state 47
    EQ      shift, and go to state 48
    NEQ     shift, and go to state 49
    LT      shift, and go to state 50
    LE      shift, and go to state 51
    GT      shift, and go to state 52
    GE      shift, and go to state 53
    AND     shift, and go to state 54
    OR      shift, and go to state 55

    PLUS      [reduce using rule 32 (exp)]
    MINUS     [reduce using rule 32 (exp)]
    TIMES     [reduce using rule 32 (exp)]
    DIVIDE    [reduce using rule 32 (exp)]
    EQ        [reduce using rule 32 (exp)]
    NEQ       [reduce using rule 32 (exp)]
    LT        [reduce using rule 32 (exp)]
    LE        [reduce using rule 32 (exp)]
    GT        [reduce using rule 32 (exp)]
    GE        [reduce using rule 32 (exp)]
    AND       [reduce using rule 32 (exp)]
    OR        [reduce using rule 32 (exp)]
    $default  reduce using rule 32 (exp)

    op  go to state 56


state 76

   32 exp: exp . op exp
   59 lvalue: lvalue LBRACK exp . RBRACK

    RBRACK  shift, and go to state 99
    PLUS    shift, and go to state 44
    MINUS   shift, and go to state 45
    TIMES   shift, and go to state 46
    DIVIDE  shift, and go to state 47
    EQ      shift, and go to state 48
    NEQ     shift, and go to state 49
    LT      shift, and go to state 50
    LE      shift, and go to state 51
    GT      shift, and go to state 52
    GE      shift, and go to state 53
    AND     shift, and go to state 54
    OR      shift, and go to state 55

    op  go to state 56


state 77

   60 lvalue: lvalue DOT ID .

    $default  reduce using rule 60 (lvalue)


state 78

   32 exp: exp . op exp
   41    | lvalue ASSIGN exp .

    PLUS    shift, and go to state 44
    MINUS   shift, and go to state 45
    TIMES   shift, and go to state 46
    DIVIDE  shift, and go to state 47
    EQ      shift, and go to state 48
    NEQ     shift, and go to state 49
    LT      shift, and go to state 50
    LE      shift, and go to state 51
    GT      shift, and go to state 52
    GE      shift, and go to state 53
    AND     shift, and go to state 54
    OR      shift, and go to state 55

    PLUS      [reduce using rule 41 (exp)]
    MINUS     [reduce using rule 41 (exp)]
    TIMES     [reduce using rule 41 (exp)]
    DIVIDE    [reduce using rule 41 (exp)]
    EQ        [reduce using rule 41 (exp)]
    NEQ       [reduce using rule 41 (exp)]
    LT        [reduce using rule 41 (exp)]
    LE        [reduce using rule 41 (exp)]
    GT        [reduce using rule 41 (exp)]
    GE        [reduce using rule 41 (exp)]
    AND       [reduce using rule 41 (exp)]
    OR        [reduce using rule 41 (exp)]
    $default  reduce using rule 41 (exp)

    op  go to state 56


state 79

   54 exps: exps COMMA . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    LBRACK  shift, and go to state 5
    LBRACE  shift, and go to state 6
    MINUS   shift, and go to state 7
    IF      shift, and go to state 8
    WHILE   shift, and go to state 9
    FOR     shift, and go to state 10
    LET     shift, and go to state 11
    BREAK   shift, and go to state 12
    NIL     shift, and go to state 13

    exp     go to state 100
    lvalue  go to state 23
    list    go to state 24


state 80

   31 exp: ID LPAREN exps RPAREN .

    $default  reduce using rule 31 (exp)


state 81

   32 exp: exp . op exp
   56 expseq: expseq SEMICOLON exp .

    PLUS    shift, and go to state 44
    MINUS   shift, and go to state 45
    TIMES   shift, and go to state 46
    DIVIDE  shift, and go to state 47
    EQ      shift, and go to state 48
    NEQ     shift, and go to state 49
    LT      shift, and go to state 50
    LE      shift, and go to state 51
    GT      shift, and go to state 52
    GE      shift, and go to state 53
    AND     shift, and go to state 54
    OR      shift, and go to state 55

    $default  reduce using rule 56 (expseq)

    op  go to state 56


state 82

   32 exp: exp . op exp
   34    | IF exp THEN exp . ELSE exp
   35    | IF exp THEN exp .

    PLUS    shift, and go to state 44
    MINUS   shift, and go to state 45
    TIMES   shift, and go to state 46
    DIVIDE  shift, and go to state 47
    EQ      shift, and go to state 48
    NEQ     shift, and go to state 49
    LT      shift, and go to state 50
    LE      shift, and go to state 51
    GT      shift, and go to state 52
    GE      shift, and go to state 53
    AND     shift, and go to state 54
    OR      shift, and go to state 55
    ELSE    shift, and go to state 101

    PLUS      [reduce using rule 35 (exp)]
    MINUS     [reduce using rule 35 (exp)]
    TIMES     [reduce using rule 35 (exp)]
    DIVIDE    [reduce using rule 35 (exp)]
    EQ        [reduce using rule 35 (exp)]
    NEQ       [reduce using rule 35 (exp)]
    LT        [reduce using rule 35 (exp)]
    LE        [reduce using rule 35 (exp)]
    GT        [reduce using rule 35 (exp)]
    GE        [reduce using rule 35 (exp)]
    AND       [reduce using rule 35 (exp)]
    OR        [reduce using rule 35 (exp)]
    ELSE      [reduce using rule 35 (exp)]
    $default  reduce using rule 35 (exp)

    op  go to state 56


state 83

   32 exp: exp . op exp
   36    | WHILE exp DO exp .

    PLUS    shift, and go to state 44
    MINUS   shift, and go to state 45
    TIMES   shift, and go to state 46
    DIVIDE  shift, and go to state 47
    EQ      shift, and go to state 48
    NEQ     shift, and go to state 49
    LT      shift, and go to state 50
    LE      shift, and go to state 51
    GT      shift, and go to state 52
    GE      shift, and go to state 53
    AND     shift, and go to state 54
    OR      shift, and go to state 55

    PLUS      [reduce using rule 36 (exp)]
    MINUS     [reduce using rule 36 (exp)]
    TIMES     [reduce using rule 36 (exp)]
    DIVIDE    [reduce using rule 36 (exp)]
    EQ        [reduce using rule 36 (exp)]
    NEQ       [reduce using rule 36 (exp)]
    LT        [reduce using rule 36 (exp)]
    LE        [reduce using rule 36 (exp)]
    GT        [reduce using rule 36 (exp)]
    GE        [reduce using rule 36 (exp)]
    AND       [reduce using rule 36 (exp)]
    OR        [reduce using rule 36 (exp)]
    $default  reduce using rule 36 (exp)

    op  go to state 56


state 84

   32 exp: exp . op exp
   37    | FOR ID ASSIGN exp . TO exp DO exp

    PLUS    shift, and go to state 44
    MINUS   shift, and go to state 45
    TIMES   shift, and go to state 46
    DIVIDE  shift, and go to state 47
    EQ      shift, and go to state 48
    NEQ     shift, and go to state 49
    LT      shift, and go to state 50
    LE      shift, and go to state 51
    GT      shift, and go to state 52
    GE      shift, and go to state 53
    AND     shift, and go to state 54
    OR      shift, and go to state 55
    TO      shift, and go to state 102

    op  go to state 56


state 85

   32 exp: exp . op exp
   57 expseq: exp .

    PLUS    shift, and go to state 44
    MINUS   shift, and go to state 45
    TIMES   shift, and go to state 46
    DIVIDE  shift, and go to state 47
    EQ      shift, and go to state 48
    NEQ     shift, and go to state 49
    LT      shift, and go to state 50
    LE      shift, and go to state 51
    GT      shift, and go to state 52
    GE      shift, and go to state 53
    AND     shift, and go to state 54
    OR      shift, and go to state 55

    $default  reduce using rule 57 (expseq)

    op  go to state 56


state 86

   39 exp: LET decs IN expseq . END
   56 expseq: expseq . SEMICOLON exp

    SEMICOLON  shift, and go to state 65
    END        shift, and go to state 103


state 87

   13 tyfield: ID . COLON typeid

    COLON  shift, and go to state 104


state 88

   16 tyfields: tyfield .

    $default  reduce using rule 16 (tyfields)


state 89

   15 tyfields: tyfields . COMMA tyfield
   63 fundec: FUNCTION ID LPAREN tyfields . RPAREN EQ exp
   64       | FUNCTION ID LPAREN tyfields . RPAREN COLON typeid EQ exp

    COMMA   shift, and go to state 105
    RPAREN  shift, and go to state 106


state 90

   18 vardec: VAR ID COLON typeid . ASSIGN exp2

    ASSIGN  shift, and go to state 107


state 91

    8 typeid: ID .
   30 exp: ID . LPAREN RPAREN
   31    | ID . LPAREN exps RPAREN
   33    | ID . ASSIGN exp
   61 lvalue: ID .

    LPAREN  shift, and go to state 26
    ASSIGN  shift, and go to state 27

    LBRACK    reduce using rule 8 (typeid)
    LBRACK    [reduce using rule 61 (lvalue)]
    ASSIGN    [reduce using rule 61 (lvalue)]
    $default  reduce using rule 61 (lvalue)


state 92

   20 exp2: typeid . LBRACK exp RBRACK OF exp

    LBRACK  shift, and go to state 108


state 93

   17 vardec: VAR ID ASSIGN exp2 .

    $default  reduce using rule 17 (vardec)


state 94

   19 exp2: exp .
   32 exp: exp . op exp

    PLUS    shift, and go to state 44
    MINUS   shift, and go to state 45
    TIMES   shift, and go to state 46
    DIVIDE  shift, and go to state 47
    EQ      shift, and go to state 48
    NEQ     shift, and go to state 49
    LT      shift, and go to state 50
    LE      shift, and go to state 51
    GT      shift, and go to state 52
    GE      shift, and go to state 53
    AND     shift, and go to state 54
    OR      shift, and go to state 55

    $default  reduce using rule 19 (exp2)

    op  go to state 56


state 95

   12 ty: LBRACE . tyfields RBRACE

    ID  shift, and go to state 87

    $default  reduce using rule 14 (tyfield)

    tyfield   go to state 88
    tyfields  go to state 109


state 96

   11 ty: ARRAY . OF typeid

    OF  shift, and go to state 110


state 97

   10 ty: typeid .

    $default  reduce using rule 10 (ty)


state 98

    9 tydec: TYPE typeid EQ ty .

    $default  reduce using rule 9 (tydec)


state 99

   59 lvalue: lvalue LBRACK exp RBRACK .

    $default  reduce using rule 59 (lvalue)


state 100

   32 exp: exp . op exp
   54 exps: exps COMMA exp .

    PLUS    shift, and go to state 44
    MINUS   shift, and go to state 45
    TIMES   shift, and go to state 46
    DIVIDE  shift, and go to state 47
    EQ      shift, and go to state 48
    NEQ     shift, and go to state 49
    LT      shift, and go to state 50
    LE      shift, and go to state 51
    GT      shift, and go to state 52
    GE      shift, and go to state 53
    AND     shift, and go to state 54
    OR      shift, and go to state 55

    $default  reduce using rule 54 (exps)

    op  go to state 56


state 101

   34 exp: IF exp THEN exp ELSE . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    LBRACK  shift, and go to state 5
    LBRACE  shift, and go to state 6
    MINUS   shift, and go to state 7
    IF      shift, and go to state 8
    WHILE   shift, and go to state 9
    FOR     shift, and go to state 10
    LET     shift, and go to state 11
    BREAK   shift, and go to state 12
    NIL     shift, and go to state 13

    exp     go to state 111
    lvalue  go to state 23
    list    go to state 24


state 102

   37 exp: FOR ID ASSIGN exp TO . exp DO exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    LBRACK  shift, and go to state 5
    LBRACE  shift, and go to state 6
    MINUS   shift, and go to state 7
    IF      shift, and go to state 8
    WHILE   shift, and go to state 9
    FOR     shift, and go to state 10
    LET     shift, and go to state 11
    BREAK   shift, and go to state 12
    NIL     shift, and go to state 13

    exp     go to state 112
    lvalue  go to state 23
    list    go to state 24


state 103

   39 exp: LET decs IN expseq END .

    $default  reduce using rule 39 (exp)


state 104

   13 tyfield: ID COLON . typeid

    ID  shift, and go to state 40

    typeid  go to state 113


state 105

   15 tyfields: tyfields COMMA . tyfield

    ID  shift, and go to state 87

    $default  reduce using rule 14 (tyfield)

    tyfield  go to state 114


state 106

   63 fundec: FUNCTION ID LPAREN tyfields RPAREN . EQ exp
   64       | FUNCTION ID LPAREN tyfields RPAREN . COLON typeid EQ exp

    COLON  shift, and go to state 115
    EQ     shift, and go to state 116


state 107

   18 vardec: VAR ID COLON typeid ASSIGN . exp2

    ID      shift, and go to state 91
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    LBRACK  shift, and go to state 5
    LBRACE  shift, and go to state 6
    MINUS   shift, and go to state 7
    IF      shift, and go to state 8
    WHILE   shift, and go to state 9
    FOR     shift, and go to state 10
    LET     shift, and go to state 11
    BREAK   shift, and go to state 12
    NIL     shift, and go to state 13

    typeid  go to state 92
    exp2    go to state 117
    exp     go to state 94
    lvalue  go to state 23
    list    go to state 24


state 108

   20 exp2: typeid LBRACK . exp RBRACK OF exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    LBRACK  shift, and go to state 5
    LBRACE  shift, and go to state 6
    MINUS   shift, and go to state 7
    IF      shift, and go to state 8
    WHILE   shift, and go to state 9
    FOR     shift, and go to state 10
    LET     shift, and go to state 11
    BREAK   shift, and go to state 12
    NIL     shift, and go to state 13

    exp     go to state 118
    lvalue  go to state 23
    list    go to state 24


state 109

   12 ty: LBRACE tyfields . RBRACE
   15 tyfields: tyfields . COMMA tyfield

    COMMA   shift, and go to state 105
    RBRACE  shift, and go to state 119


state 110

   11 ty: ARRAY OF . typeid

    ID  shift, and go to state 40

    typeid  go to state 120


state 111

   32 exp: exp . op exp
   34    | IF exp THEN exp ELSE exp .

    PLUS    shift, and go to state 44
    MINUS   shift, and go to state 45
    TIMES   shift, and go to state 46
    DIVIDE  shift, and go to state 47
    EQ      shift, and go to state 48
    NEQ     shift, and go to state 49
    LT      shift, and go to state 50
    LE      shift, and go to state 51
    GT      shift, and go to state 52
    GE      shift, and go to state 53
    AND     shift, and go to state 54
    OR      shift, and go to state 55

    PLUS      [reduce using rule 34 (exp)]
    MINUS     [reduce using rule 34 (exp)]
    TIMES     [reduce using rule 34 (exp)]
    DIVIDE    [reduce using rule 34 (exp)]
    EQ        [reduce using rule 34 (exp)]
    NEQ       [reduce using rule 34 (exp)]
    LT        [reduce using rule 34 (exp)]
    LE        [reduce using rule 34 (exp)]
    GT        [reduce using rule 34 (exp)]
    GE        [reduce using rule 34 (exp)]
    AND       [reduce using rule 34 (exp)]
    OR        [reduce using rule 34 (exp)]
    $default  reduce using rule 34 (exp)

    op  go to state 56


state 112

   32 exp: exp . op exp
   37    | FOR ID ASSIGN exp TO exp . DO exp

    PLUS    shift, and go to state 44
    MINUS   shift, and go to state 45
    TIMES   shift, and go to state 46
    DIVIDE  shift, and go to state 47
    EQ      shift, and go to state 48
    NEQ     shift, and go to state 49
    LT      shift, and go to state 50
    LE      shift, and go to state 51
    GT      shift, and go to state 52
    GE      shift, and go to state 53
    AND     shift, and go to state 54
    OR      shift, and go to state 55
    DO      shift, and go to state 121

    op  go to state 56


state 113

   13 tyfield: ID COLON typeid .

    $default  reduce using rule 13 (tyfield)


state 114

   15 tyfields: tyfields COMMA tyfield .

    $default  reduce using rule 15 (tyfields)


state 115

   64 fundec: FUNCTION ID LPAREN tyfields RPAREN COLON . typeid EQ exp

    ID  shift, and go to state 40

    typeid  go to state 122


state 116

   63 fundec: FUNCTION ID LPAREN tyfields RPAREN EQ . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    LBRACK  shift, and go to state 5
    LBRACE  shift, and go to state 6
    MINUS   shift, and go to state 7
    IF      shift, and go to state 8
    WHILE   shift, and go to state 9
    FOR     shift, and go to state 10
    LET     shift, and go to state 11
    BREAK   shift, and go to state 12
    NIL     shift, and go to state 13

    exp     go to state 123
    lvalue  go to state 23
    list    go to state 24


state 117

   18 vardec: VAR ID COLON typeid ASSIGN exp2 .

    $default  reduce using rule 18 (vardec)


state 118

   20 exp2: typeid LBRACK exp . RBRACK OF exp
   32 exp: exp . op exp

    RBRACK  shift, and go to state 124
    PLUS    shift, and go to state 44
    MINUS   shift, and go to state 45
    TIMES   shift, and go to state 46
    DIVIDE  shift, and go to state 47
    EQ      shift, and go to state 48
    NEQ     shift, and go to state 49
    LT      shift, and go to state 50
    LE      shift, and go to state 51
    GT      shift, and go to state 52
    GE      shift, and go to state 53
    AND     shift, and go to state 54
    OR      shift, and go to state 55

    op  go to state 56


state 119

   12 ty: LBRACE tyfields RBRACE .

    $default  reduce using rule 12 (ty)


state 120

   11 ty: ARRAY OF typeid .

    $default  reduce using rule 11 (ty)


state 121

   37 exp: FOR ID ASSIGN exp TO exp DO . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    LBRACK  shift, and go to state 5
    LBRACE  shift, and go to state 6
    MINUS   shift, and go to state 7
    IF      shift, and go to state 8
    WHILE   shift, and go to state 9
    FOR     shift, and go to state 10
    LET     shift, and go to state 11
    BREAK   shift, and go to state 12
    NIL     shift, and go to state 13

    exp     go to state 125
    lvalue  go to state 23
    list    go to state 24


state 122

   64 fundec: FUNCTION ID LPAREN tyfields RPAREN COLON typeid . EQ exp

    EQ  shift, and go to state 126


state 123

   32 exp: exp . op exp
   63 fundec: FUNCTION ID LPAREN tyfields RPAREN EQ exp .

    PLUS    shift, and go to state 44
    MINUS   shift, and go to state 45
    TIMES   shift, and go to state 46
    DIVIDE  shift, and go to state 47
    EQ      shift, and go to state 48
    NEQ     shift, and go to state 49
    LT      shift, and go to state 50
    LE      shift, and go to state 51
    GT      shift, and go to state 52
    GE      shift, and go to state 53
    AND     shift, and go to state 54
    OR      shift, and go to state 55

    $default  reduce using rule 63 (fundec)

    op  go to state 56


state 124

   20 exp2: typeid LBRACK exp RBRACK . OF exp

    OF  shift, and go to state 127


state 125

   32 exp: exp . op exp
   37    | FOR ID ASSIGN exp TO exp DO exp .

    PLUS    shift, and go to state 44
    MINUS   shift, and go to state 45
    TIMES   shift, and go to state 46
    DIVIDE  shift, and go to state 47
    EQ      shift, and go to state 48
    NEQ     shift, and go to state 49
    LT      shift, and go to state 50
    LE      shift, and go to state 51
    GT      shift, and go to state 52
    GE      shift, and go to state 53
    AND     shift, and go to state 54
    OR      shift, and go to state 55

    PLUS      [reduce using rule 37 (exp)]
    MINUS     [reduce using rule 37 (exp)]
    TIMES     [reduce using rule 37 (exp)]
    DIVIDE    [reduce using rule 37 (exp)]
    EQ        [reduce using rule 37 (exp)]
    NEQ       [reduce using rule 37 (exp)]
    LT        [reduce using rule 37 (exp)]
    LE        [reduce using rule 37 (exp)]
    GT        [reduce using rule 37 (exp)]
    GE        [reduce using rule 37 (exp)]
    AND       [reduce using rule 37 (exp)]
    OR        [reduce using rule 37 (exp)]
    $default  reduce using rule 37 (exp)

    op  go to state 56


state 126

   64 fundec: FUNCTION ID LPAREN tyfields RPAREN COLON typeid EQ . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    LBRACK  shift, and go to state 5
    LBRACE  shift, and go to state 6
    MINUS   shift, and go to state 7
    IF      shift, and go to state 8
    WHILE   shift, and go to state 9
    FOR     shift, and go to state 10
    LET     shift, and go to state 11
    BREAK   shift, and go to state 12
    NIL     shift, and go to state 13

    exp     go to state 128
    lvalue  go to state 23
    list    go to state 24


state 127

   20 exp2: typeid LBRACK exp RBRACK OF . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    LBRACK  shift, and go to state 5
    LBRACE  shift, and go to state 6
    MINUS   shift, and go to state 7
    IF      shift, and go to state 8
    WHILE   shift, and go to state 9
    FOR     shift, and go to state 10
    LET     shift, and go to state 11
    BREAK   shift, and go to state 12
    NIL     shift, and go to state 13

    exp     go to state 129
    lvalue  go to state 23
    list    go to state 24


state 128

   32 exp: exp . op exp
   64 fundec: FUNCTION ID LPAREN tyfields RPAREN COLON typeid EQ exp .

    PLUS    shift, and go to state 44
    MINUS   shift, and go to state 45
    TIMES   shift, and go to state 46
    DIVIDE  shift, and go to state 47
    EQ      shift, and go to state 48
    NEQ     shift, and go to state 49
    LT      shift, and go to state 50
    LE      shift, and go to state 51
    GT      shift, and go to state 52
    GE      shift, and go to state 53
    AND     shift, and go to state 54
    OR      shift, and go to state 55

    $default  reduce using rule 64 (fundec)

    op  go to state 56


state 129

   20 exp2: typeid LBRACK exp RBRACK OF exp .
   32 exp: exp . op exp

    PLUS    shift, and go to state 44
    MINUS   shift, and go to state 45
    TIMES   shift, and go to state 46
    DIVIDE  shift, and go to state 47
    EQ      shift, and go to state 48
    NEQ     shift, and go to state 49
    LT      shift, and go to state 50
    LE      shift, and go to state 51
    GT      shift, and go to state 52
    GE      shift, and go to state 53
    AND     shift, and go to state 54
    OR      shift, and go to state 55

    $default  reduce using rule 20 (exp2)

    op  go to state 56
