%{
#include <stdio.h>
#include "util.h"
#include "errormsg.h"

int yylex(void); /* function prototype */

void yyerror(char *s)
{
 EM_error(EM_tokPos, "%s", s);
}
%}


%union {
	int pos;
	int ival;
	string sval;
	}

%token <sval> ID STRING
%token <ival> INT

%token 
  COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK 
  LBRACE RBRACE DOT 
  PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE
  AND OR ASSIGN
  ARRAY IF THEN ELSE WHILE FOR TO DO LET IN END OF 
  BREAK NIL
  FUNCTION VAR TYPE 

%start program
%left PLUS MINUS
%left TIMES DIVIDE
%%

program: decs
       | exp

decs: decs dec
    | dec

dec: tydec
    | vardec
    | fundec

typeid: ID

tydec: TYPE typeid EQ ty

ty: typeid
  | ARRAY OF typeid
  | LBRACE tyfields RBRACE

tyfield: ID COLON typeid
       | /* empty */

tyfields: tyfields COMMA tyfield
        | tyfield

vardec: VAR ID ASSIGN exp2
      | VAR ID COLON typeid ASSIGN exp2

exp2: exp
    | typeid LBRACK exp RBRACK OF exp

exp: lvalue
   | NIL
   | list
   | LPAREN RPAREN | LBRACK RBRACK | LBRACE RBRACE
   | INT | MINUS exp
   | STRING
   | ID LPAREN RPAREN | ID LPAREN exps RPAREN
   | exp op exp
   | ID ASSIGN exp
   | IF exp THEN exp ELSE exp
   | IF exp THEN exp
   | WHILE exp DO exp
   | FOR ID ASSIGN exp TO exp DO exp
   | BREAK;
   | typeid LBRACE ideqexp RBRACE
   | LET decs IN expseq END
   | LPAREN exp RPAREN
   | lvalue ASSIGN exp

ideqexp: ideqexp COMMA ID EQ exp
       | ID EQ exp

op: PLUS | MINUS 
  | TIMES | DIVIDE
  | EQ | NEQ | LT | LE | GT | GE
  | AND | OR

exps: exps COMMA exp
    | exp

expseq: expseq SEMICOLON exp
      | exp
      | 

lvalue: lvalue LBRACK exp RBRACK
      | lvalue DOT ID
      | ID

list: LPAREN expseq RPAREN


fundec: FUNCTION ID LPAREN tyfields RPAREN EQ exp
      | FUNCTION ID LPAREN tyfields RPAREN COLON typeid EQ exp

